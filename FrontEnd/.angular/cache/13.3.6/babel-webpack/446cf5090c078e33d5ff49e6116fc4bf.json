{"ast":null,"code":"\"use strict\";\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nimport { ForkEvent, Provider } from \"@ethersproject/abstract-provider\";\nimport { encode as base64Encode } from \"@ethersproject/base64\";\nimport { Base58 } from \"@ethersproject/basex\";\nimport { BigNumber } from \"@ethersproject/bignumber\";\nimport { arrayify, concat, hexConcat, hexDataLength, hexDataSlice, hexlify, hexValue, hexZeroPad, isHexString } from \"@ethersproject/bytes\";\nimport { HashZero } from \"@ethersproject/constants\";\nimport { dnsEncode, namehash } from \"@ethersproject/hash\";\nimport { getNetwork } from \"@ethersproject/networks\";\nimport { defineReadOnly, getStatic, resolveProperties } from \"@ethersproject/properties\";\nimport { sha256 } from \"@ethersproject/sha2\";\nimport { toUtf8Bytes, toUtf8String } from \"@ethersproject/strings\";\nimport { fetchJson, poll } from \"@ethersproject/web\";\nimport bech32 from \"bech32\";\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\nimport { Formatter } from \"./formatter\";\nconst MAX_CCIP_REDIRECTS = 10; //////////////////////////////\n// Event Serializeing\n\nfunction checkTopic(topic) {\n  if (topic == null) {\n    return \"null\";\n  }\n\n  if (hexDataLength(topic) !== 32) {\n    logger.throwArgumentError(\"invalid topic\", \"topic\", topic);\n  }\n\n  return topic.toLowerCase();\n}\n\nfunction serializeTopics(topics) {\n  // Remove trailing null AND-topics; they are redundant\n  topics = topics.slice();\n\n  while (topics.length > 0 && topics[topics.length - 1] == null) {\n    topics.pop();\n  }\n\n  return topics.map(topic => {\n    if (Array.isArray(topic)) {\n      // Only track unique OR-topics\n      const unique = {};\n      topic.forEach(topic => {\n        unique[checkTopic(topic)] = true;\n      }); // The order of OR-topics does not matter\n\n      const sorted = Object.keys(unique);\n      sorted.sort();\n      return sorted.join(\"|\");\n    } else {\n      return checkTopic(topic);\n    }\n  }).join(\"&\");\n}\n\nfunction deserializeTopics(data) {\n  if (data === \"\") {\n    return [];\n  }\n\n  return data.split(/&/g).map(topic => {\n    if (topic === \"\") {\n      return [];\n    }\n\n    const comps = topic.split(\"|\").map(topic => {\n      return topic === \"null\" ? null : topic;\n    });\n    return comps.length === 1 ? comps[0] : comps;\n  });\n}\n\nfunction getEventTag(eventName) {\n  if (typeof eventName === \"string\") {\n    eventName = eventName.toLowerCase();\n\n    if (hexDataLength(eventName) === 32) {\n      return \"tx:\" + eventName;\n    }\n\n    if (eventName.indexOf(\":\") === -1) {\n      return eventName;\n    }\n  } else if (Array.isArray(eventName)) {\n    return \"filter:*:\" + serializeTopics(eventName);\n  } else if (ForkEvent.isForkEvent(eventName)) {\n    logger.warn(\"not implemented\");\n    throw new Error(\"not implemented\");\n  } else if (eventName && typeof eventName === \"object\") {\n    return \"filter:\" + (eventName.address || \"*\") + \":\" + serializeTopics(eventName.topics || []);\n  }\n\n  throw new Error(\"invalid event - \" + eventName);\n} //////////////////////////////\n// Helper Object\n\n\nfunction getTime() {\n  return new Date().getTime();\n}\n\nfunction stall(duration) {\n  return new Promise(resolve => {\n    setTimeout(resolve, duration);\n  });\n} //////////////////////////////\n// Provider Object\n\n/**\n *  EventType\n *   - \"block\"\n *   - \"poll\"\n *   - \"didPoll\"\n *   - \"pending\"\n *   - \"error\"\n *   - \"network\"\n *   - filter\n *   - topics array\n *   - transaction hash\n */\n\n\nconst PollableEvents = [\"block\", \"network\", \"pending\", \"poll\"];\nexport class Event {\n  constructor(tag, listener, once) {\n    defineReadOnly(this, \"tag\", tag);\n    defineReadOnly(this, \"listener\", listener);\n    defineReadOnly(this, \"once\", once);\n    this._lastBlockNumber = -2;\n    this._inflight = false;\n  }\n\n  get event() {\n    switch (this.type) {\n      case \"tx\":\n        return this.hash;\n\n      case \"filter\":\n        return this.filter;\n    }\n\n    return this.tag;\n  }\n\n  get type() {\n    return this.tag.split(\":\")[0];\n  }\n\n  get hash() {\n    const comps = this.tag.split(\":\");\n\n    if (comps[0] !== \"tx\") {\n      return null;\n    }\n\n    return comps[1];\n  }\n\n  get filter() {\n    const comps = this.tag.split(\":\");\n\n    if (comps[0] !== \"filter\") {\n      return null;\n    }\n\n    const address = comps[1];\n    const topics = deserializeTopics(comps[2]);\n    const filter = {};\n\n    if (topics.length > 0) {\n      filter.topics = topics;\n    }\n\n    if (address && address !== \"*\") {\n      filter.address = address;\n    }\n\n    return filter;\n  }\n\n  pollable() {\n    return this.tag.indexOf(\":\") >= 0 || PollableEvents.indexOf(this.tag) >= 0;\n  }\n\n}\n; // https://github.com/satoshilabs/slips/blob/master/slip-0044.md\n\nconst coinInfos = {\n  \"0\": {\n    symbol: \"btc\",\n    p2pkh: 0x00,\n    p2sh: 0x05,\n    prefix: \"bc\"\n  },\n  \"2\": {\n    symbol: \"ltc\",\n    p2pkh: 0x30,\n    p2sh: 0x32,\n    prefix: \"ltc\"\n  },\n  \"3\": {\n    symbol: \"doge\",\n    p2pkh: 0x1e,\n    p2sh: 0x16\n  },\n  \"60\": {\n    symbol: \"eth\",\n    ilk: \"eth\"\n  },\n  \"61\": {\n    symbol: \"etc\",\n    ilk: \"eth\"\n  },\n  \"700\": {\n    symbol: \"xdai\",\n    ilk: \"eth\"\n  }\n};\n\nfunction bytes32ify(value) {\n  return hexZeroPad(BigNumber.from(value).toHexString(), 32);\n} // Compute the Base58Check encoded data (checksum is first 4 bytes of sha256d)\n\n\nfunction base58Encode(data) {\n  return Base58.encode(concat([data, hexDataSlice(sha256(sha256(data)), 0, 4)]));\n}\n\nconst matcherIpfs = new RegExp(\"^(ipfs):/\\/(.*)$\", \"i\");\nconst matchers = [new RegExp(\"^(https):/\\/(.*)$\", \"i\"), new RegExp(\"^(data):(.*)$\", \"i\"), matcherIpfs, new RegExp(\"^eip155:[0-9]+/(erc[0-9]+):(.*)$\", \"i\")];\n\nfunction _parseString(result, start) {\n  try {\n    return toUtf8String(_parseBytes(result, start));\n  } catch (error) {}\n\n  return null;\n}\n\nfunction _parseBytes(result, start) {\n  if (result === \"0x\") {\n    return null;\n  }\n\n  const offset = BigNumber.from(hexDataSlice(result, start, start + 32)).toNumber();\n  const length = BigNumber.from(hexDataSlice(result, offset, offset + 32)).toNumber();\n  return hexDataSlice(result, offset + 32, offset + 32 + length);\n} // Trim off the ipfs:// prefix and return the default gateway URL\n\n\nfunction getIpfsLink(link) {\n  if (link.match(/^ipfs:\\/\\/ipfs\\//i)) {\n    link = link.substring(12);\n  } else if (link.match(/^ipfs:\\/\\//i)) {\n    link = link.substring(7);\n  } else {\n    logger.throwArgumentError(\"unsupported IPFS format\", \"link\", link);\n  }\n\n  return `https:/\\/gateway.ipfs.io/ipfs/${link}`;\n}\n\nfunction numPad(value) {\n  const result = arrayify(value);\n\n  if (result.length > 32) {\n    throw new Error(\"internal; should not happen\");\n  }\n\n  const padded = new Uint8Array(32);\n  padded.set(result, 32 - result.length);\n  return padded;\n}\n\nfunction bytesPad(value) {\n  if (value.length % 32 === 0) {\n    return value;\n  }\n\n  const result = new Uint8Array(Math.ceil(value.length / 32) * 32);\n  result.set(value);\n  return result;\n} // ABI Encodes a series of (bytes, bytes, ...)\n\n\nfunction encodeBytes(datas) {\n  const result = [];\n  let byteCount = 0; // Add place-holders for pointers as we add items\n\n  for (let i = 0; i < datas.length; i++) {\n    result.push(null);\n    byteCount += 32;\n  }\n\n  for (let i = 0; i < datas.length; i++) {\n    const data = arrayify(datas[i]); // Update the bytes offset\n\n    result[i] = numPad(byteCount); // The length and padded value of data\n\n    result.push(numPad(data.length));\n    result.push(bytesPad(data));\n    byteCount += 32 + Math.ceil(data.length / 32) * 32;\n  }\n\n  return hexConcat(result);\n}\n\nexport class Resolver {\n  // The resolvedAddress is only for creating a ReverseLookup resolver\n  constructor(provider, address, name, resolvedAddress) {\n    defineReadOnly(this, \"provider\", provider);\n    defineReadOnly(this, \"name\", name);\n    defineReadOnly(this, \"address\", provider.formatter.address(address));\n    defineReadOnly(this, \"_resolvedAddress\", resolvedAddress);\n  }\n\n  supportsWildcard() {\n    if (!this._supportsEip2544) {\n      // supportsInterface(bytes4 = selector(\"resolve(bytes,bytes)\"))\n      this._supportsEip2544 = this.provider.call({\n        to: this.address,\n        data: \"0x01ffc9a79061b92300000000000000000000000000000000000000000000000000000000\"\n      }).then(result => {\n        return BigNumber.from(result).eq(1);\n      }).catch(error => {\n        if (error.code === Logger.errors.CALL_EXCEPTION) {\n          return false;\n        } // Rethrow the error: link is down, etc. Let future attempts retry.\n\n\n        this._supportsEip2544 = null;\n        throw error;\n      });\n    }\n\n    return this._supportsEip2544;\n  }\n\n  _fetch(selector, parameters) {\n    return __awaiter(this, void 0, void 0, function* () {\n      // e.g. keccak256(\"addr(bytes32,uint256)\")\n      const tx = {\n        to: this.address,\n        ccipReadEnabled: true,\n        data: hexConcat([selector, namehash(this.name), parameters || \"0x\"])\n      }; // Wildcard support; use EIP-2544 to resolve the request\n\n      let parseBytes = false;\n\n      if (yield this.supportsWildcard()) {\n        parseBytes = true; // selector(\"resolve(bytes,bytes)\")\n\n        tx.data = hexConcat([\"0x9061b923\", encodeBytes([dnsEncode(this.name), tx.data])]);\n      }\n\n      try {\n        let result = yield this.provider.call(tx);\n\n        if (arrayify(result).length % 32 === 4) {\n          logger.throwError(\"resolver threw error\", Logger.errors.CALL_EXCEPTION, {\n            transaction: tx,\n            data: result\n          });\n        }\n\n        if (parseBytes) {\n          result = _parseBytes(result, 0);\n        }\n\n        return result;\n      } catch (error) {\n        if (error.code === Logger.errors.CALL_EXCEPTION) {\n          return null;\n        }\n\n        throw error;\n      }\n    });\n  }\n\n  _fetchBytes(selector, parameters) {\n    return __awaiter(this, void 0, void 0, function* () {\n      const result = yield this._fetch(selector, parameters);\n\n      if (result != null) {\n        return _parseBytes(result, 0);\n      }\n\n      return null;\n    });\n  }\n\n  _getAddress(coinType, hexBytes) {\n    const coinInfo = coinInfos[String(coinType)];\n\n    if (coinInfo == null) {\n      logger.throwError(`unsupported coin type: ${coinType}`, Logger.errors.UNSUPPORTED_OPERATION, {\n        operation: `getAddress(${coinType})`\n      });\n    }\n\n    if (coinInfo.ilk === \"eth\") {\n      return this.provider.formatter.address(hexBytes);\n    }\n\n    const bytes = arrayify(hexBytes); // P2PKH: OP_DUP OP_HASH160 <pubKeyHash> OP_EQUALVERIFY OP_CHECKSIG\n\n    if (coinInfo.p2pkh != null) {\n      const p2pkh = hexBytes.match(/^0x76a9([0-9a-f][0-9a-f])([0-9a-f]*)88ac$/);\n\n      if (p2pkh) {\n        const length = parseInt(p2pkh[1], 16);\n\n        if (p2pkh[2].length === length * 2 && length >= 1 && length <= 75) {\n          return base58Encode(concat([[coinInfo.p2pkh], \"0x\" + p2pkh[2]]));\n        }\n      }\n    } // P2SH: OP_HASH160 <scriptHash> OP_EQUAL\n\n\n    if (coinInfo.p2sh != null) {\n      const p2sh = hexBytes.match(/^0xa9([0-9a-f][0-9a-f])([0-9a-f]*)87$/);\n\n      if (p2sh) {\n        const length = parseInt(p2sh[1], 16);\n\n        if (p2sh[2].length === length * 2 && length >= 1 && length <= 75) {\n          return base58Encode(concat([[coinInfo.p2sh], \"0x\" + p2sh[2]]));\n        }\n      }\n    } // Bech32\n\n\n    if (coinInfo.prefix != null) {\n      const length = bytes[1]; // https://github.com/bitcoin/bips/blob/master/bip-0141.mediawiki#witness-program\n\n      let version = bytes[0];\n\n      if (version === 0x00) {\n        if (length !== 20 && length !== 32) {\n          version = -1;\n        }\n      } else {\n        version = -1;\n      }\n\n      if (version >= 0 && bytes.length === 2 + length && length >= 1 && length <= 75) {\n        const words = bech32.toWords(bytes.slice(2));\n        words.unshift(version);\n        return bech32.encode(coinInfo.prefix, words);\n      }\n    }\n\n    return null;\n  }\n\n  getAddress(coinType) {\n    return __awaiter(this, void 0, void 0, function* () {\n      if (coinType == null) {\n        coinType = 60;\n      } // If Ethereum, use the standard `addr(bytes32)`\n\n\n      if (coinType === 60) {\n        try {\n          // keccak256(\"addr(bytes32)\")\n          const result = yield this._fetch(\"0x3b3b57de\"); // No address\n\n          if (result === \"0x\" || result === HashZero) {\n            return null;\n          }\n\n          return this.provider.formatter.callAddress(result);\n        } catch (error) {\n          if (error.code === Logger.errors.CALL_EXCEPTION) {\n            return null;\n          }\n\n          throw error;\n        }\n      } // keccak256(\"addr(bytes32,uint256\")\n\n\n      const hexBytes = yield this._fetchBytes(\"0xf1cb7e06\", bytes32ify(coinType)); // No address\n\n      if (hexBytes == null || hexBytes === \"0x\") {\n        return null;\n      } // Compute the address\n\n\n      const address = this._getAddress(coinType, hexBytes);\n\n      if (address == null) {\n        logger.throwError(`invalid or unsupported coin data`, Logger.errors.UNSUPPORTED_OPERATION, {\n          operation: `getAddress(${coinType})`,\n          coinType: coinType,\n          data: hexBytes\n        });\n      }\n\n      return address;\n    });\n  }\n\n  getAvatar() {\n    return __awaiter(this, void 0, void 0, function* () {\n      const linkage = [{\n        type: \"name\",\n        content: this.name\n      }];\n\n      try {\n        // test data for ricmoo.eth\n        //const avatar = \"eip155:1/erc721:0x265385c7f4132228A0d54EB1A9e7460b91c0cC68/29233\";\n        const avatar = yield this.getText(\"avatar\");\n\n        if (avatar == null) {\n          return null;\n        }\n\n        for (let i = 0; i < matchers.length; i++) {\n          const match = avatar.match(matchers[i]);\n\n          if (match == null) {\n            continue;\n          }\n\n          const scheme = match[1].toLowerCase();\n\n          switch (scheme) {\n            case \"https\":\n              linkage.push({\n                type: \"url\",\n                content: avatar\n              });\n              return {\n                linkage,\n                url: avatar\n              };\n\n            case \"data\":\n              linkage.push({\n                type: \"data\",\n                content: avatar\n              });\n              return {\n                linkage,\n                url: avatar\n              };\n\n            case \"ipfs\":\n              linkage.push({\n                type: \"ipfs\",\n                content: avatar\n              });\n              return {\n                linkage,\n                url: getIpfsLink(avatar)\n              };\n\n            case \"erc721\":\n            case \"erc1155\":\n              {\n                // Depending on the ERC type, use tokenURI(uint256) or url(uint256)\n                const selector = scheme === \"erc721\" ? \"0xc87b56dd\" : \"0x0e89341c\";\n                linkage.push({\n                  type: scheme,\n                  content: avatar\n                }); // The owner of this name\n\n                const owner = this._resolvedAddress || (yield this.getAddress());\n                const comps = (match[2] || \"\").split(\"/\");\n\n                if (comps.length !== 2) {\n                  return null;\n                }\n\n                const addr = yield this.provider.formatter.address(comps[0]);\n                const tokenId = hexZeroPad(BigNumber.from(comps[1]).toHexString(), 32); // Check that this account owns the token\n\n                if (scheme === \"erc721\") {\n                  // ownerOf(uint256 tokenId)\n                  const tokenOwner = this.provider.formatter.callAddress(yield this.provider.call({\n                    to: addr,\n                    data: hexConcat([\"0x6352211e\", tokenId])\n                  }));\n\n                  if (owner !== tokenOwner) {\n                    return null;\n                  }\n\n                  linkage.push({\n                    type: \"owner\",\n                    content: tokenOwner\n                  });\n                } else if (scheme === \"erc1155\") {\n                  // balanceOf(address owner, uint256 tokenId)\n                  const balance = BigNumber.from(yield this.provider.call({\n                    to: addr,\n                    data: hexConcat([\"0x00fdd58e\", hexZeroPad(owner, 32), tokenId])\n                  }));\n\n                  if (balance.isZero()) {\n                    return null;\n                  }\n\n                  linkage.push({\n                    type: \"balance\",\n                    content: balance.toString()\n                  });\n                } // Call the token contract for the metadata URL\n\n\n                const tx = {\n                  to: this.provider.formatter.address(comps[0]),\n                  data: hexConcat([selector, tokenId])\n                };\n\n                let metadataUrl = _parseString(yield this.provider.call(tx), 0);\n\n                if (metadataUrl == null) {\n                  return null;\n                }\n\n                linkage.push({\n                  type: \"metadata-url-base\",\n                  content: metadataUrl\n                }); // ERC-1155 allows a generic {id} in the URL\n\n                if (scheme === \"erc1155\") {\n                  metadataUrl = metadataUrl.replace(\"{id}\", tokenId.substring(2));\n                  linkage.push({\n                    type: \"metadata-url-expanded\",\n                    content: metadataUrl\n                  });\n                } // Transform IPFS metadata links\n\n\n                if (metadataUrl.match(/^ipfs:/i)) {\n                  metadataUrl = getIpfsLink(metadataUrl);\n                }\n\n                linkage.push({\n                  type: \"metadata-url\",\n                  content: metadataUrl\n                }); // Get the token metadata\n\n                const metadata = yield fetchJson(metadataUrl);\n\n                if (!metadata) {\n                  return null;\n                }\n\n                linkage.push({\n                  type: \"metadata\",\n                  content: JSON.stringify(metadata)\n                }); // Pull the image URL out\n\n                let imageUrl = metadata.image;\n\n                if (typeof imageUrl !== \"string\") {\n                  return null;\n                }\n\n                if (imageUrl.match(/^(https:\\/\\/|data:)/i)) {// Allow\n                } else {\n                  // Transform IPFS link to gateway\n                  const ipfs = imageUrl.match(matcherIpfs);\n\n                  if (ipfs == null) {\n                    return null;\n                  }\n\n                  linkage.push({\n                    type: \"url-ipfs\",\n                    content: imageUrl\n                  });\n                  imageUrl = getIpfsLink(imageUrl);\n                }\n\n                linkage.push({\n                  type: \"url\",\n                  content: imageUrl\n                });\n                return {\n                  linkage,\n                  url: imageUrl\n                };\n              }\n          }\n        }\n      } catch (error) {}\n\n      return null;\n    });\n  }\n\n  getContentHash() {\n    return __awaiter(this, void 0, void 0, function* () {\n      // keccak256(\"contenthash()\")\n      const hexBytes = yield this._fetchBytes(\"0xbc1c58d1\"); // No contenthash\n\n      if (hexBytes == null || hexBytes === \"0x\") {\n        return null;\n      } // IPFS (CID: 1, Type: DAG-PB)\n\n\n      const ipfs = hexBytes.match(/^0xe3010170(([0-9a-f][0-9a-f])([0-9a-f][0-9a-f])([0-9a-f]*))$/);\n\n      if (ipfs) {\n        const length = parseInt(ipfs[3], 16);\n\n        if (ipfs[4].length === length * 2) {\n          return \"ipfs:/\\/\" + Base58.encode(\"0x\" + ipfs[1]);\n        }\n      } // IPNS (CID: 1, Type: libp2p-key)\n\n\n      const ipns = hexBytes.match(/^0xe5010172(([0-9a-f][0-9a-f])([0-9a-f][0-9a-f])([0-9a-f]*))$/);\n\n      if (ipns) {\n        const length = parseInt(ipns[3], 16);\n\n        if (ipns[4].length === length * 2) {\n          return \"ipns:/\\/\" + Base58.encode(\"0x\" + ipns[1]);\n        }\n      } // Swarm (CID: 1, Type: swarm-manifest; hash/length hard-coded to keccak256/32)\n\n\n      const swarm = hexBytes.match(/^0xe40101fa011b20([0-9a-f]*)$/);\n\n      if (swarm) {\n        if (swarm[1].length === 32 * 2) {\n          return \"bzz:/\\/\" + swarm[1];\n        }\n      }\n\n      const skynet = hexBytes.match(/^0x90b2c605([0-9a-f]*)$/);\n\n      if (skynet) {\n        if (skynet[1].length === 34 * 2) {\n          // URL Safe base64; https://datatracker.ietf.org/doc/html/rfc4648#section-5\n          const urlSafe = {\n            \"=\": \"\",\n            \"+\": \"-\",\n            \"/\": \"_\"\n          };\n          const hash = base64Encode(\"0x\" + skynet[1]).replace(/[=+\\/]/g, a => urlSafe[a]);\n          return \"sia:/\\/\" + hash;\n        }\n      }\n\n      return logger.throwError(`invalid or unsupported content hash data`, Logger.errors.UNSUPPORTED_OPERATION, {\n        operation: \"getContentHash()\",\n        data: hexBytes\n      });\n    });\n  }\n\n  getText(key) {\n    return __awaiter(this, void 0, void 0, function* () {\n      // The key encoded as parameter to fetchBytes\n      let keyBytes = toUtf8Bytes(key); // The nodehash consumes the first slot, so the string pointer targets\n      // offset 64, with the length at offset 64 and data starting at offset 96\n\n      keyBytes = concat([bytes32ify(64), bytes32ify(keyBytes.length), keyBytes]); // Pad to word-size (32 bytes)\n\n      if (keyBytes.length % 32 !== 0) {\n        keyBytes = concat([keyBytes, hexZeroPad(\"0x\", 32 - key.length % 32)]);\n      }\n\n      const hexBytes = yield this._fetchBytes(\"0x59d1d43c\", hexlify(keyBytes));\n\n      if (hexBytes == null || hexBytes === \"0x\") {\n        return null;\n      }\n\n      return toUtf8String(hexBytes);\n    });\n  }\n\n}\nlet defaultFormatter = null;\nlet nextPollId = 1;\nexport class BaseProvider extends Provider {\n  /**\n   *  ready\n   *\n   *  A Promise<Network> that resolves only once the provider is ready.\n   *\n   *  Sub-classes that call the super with a network without a chainId\n   *  MUST set this. Standard named networks have a known chainId.\n   *\n   */\n  constructor(network) {\n    super(); // Events being listened to\n\n    this._events = [];\n    this._emitted = {\n      block: -2\n    };\n    this.disableCcipRead = false;\n    this.formatter = new.target.getFormatter(); // If network is any, this Provider allows the underlying\n    // network to change dynamically, and we auto-detect the\n    // current network\n\n    defineReadOnly(this, \"anyNetwork\", network === \"any\");\n\n    if (this.anyNetwork) {\n      network = this.detectNetwork();\n    }\n\n    if (network instanceof Promise) {\n      this._networkPromise = network; // Squash any \"unhandled promise\" errors; that do not need to be handled\n\n      network.catch(error => {}); // Trigger initial network setting (async)\n\n      this._ready().catch(error => {});\n    } else {\n      const knownNetwork = getStatic(new.target, \"getNetwork\")(network);\n\n      if (knownNetwork) {\n        defineReadOnly(this, \"_network\", knownNetwork);\n        this.emit(\"network\", knownNetwork, null);\n      } else {\n        logger.throwArgumentError(\"invalid network\", \"network\", network);\n      }\n    }\n\n    this._maxInternalBlockNumber = -1024;\n    this._lastBlockNumber = -2;\n    this._maxFilterBlockRange = 10;\n    this._pollingInterval = 4000;\n    this._fastQueryDate = 0;\n  }\n\n  _ready() {\n    return __awaiter(this, void 0, void 0, function* () {\n      if (this._network == null) {\n        let network = null;\n\n        if (this._networkPromise) {\n          try {\n            network = yield this._networkPromise;\n          } catch (error) {}\n        } // Try the Provider's network detection (this MUST throw if it cannot)\n\n\n        if (network == null) {\n          network = yield this.detectNetwork();\n        } // This should never happen; every Provider sub-class should have\n        // suggested a network by here (or have thrown).\n\n\n        if (!network) {\n          logger.throwError(\"no network detected\", Logger.errors.UNKNOWN_ERROR, {});\n        } // Possible this call stacked so do not call defineReadOnly again\n\n\n        if (this._network == null) {\n          if (this.anyNetwork) {\n            this._network = network;\n          } else {\n            defineReadOnly(this, \"_network\", network);\n          }\n\n          this.emit(\"network\", network, null);\n        }\n      }\n\n      return this._network;\n    });\n  } // This will always return the most recently established network.\n  // For \"any\", this can change (a \"network\" event is emitted before\n  // any change is reflected); otherwise this cannot change\n\n\n  get ready() {\n    return poll(() => {\n      return this._ready().then(network => {\n        return network;\n      }, error => {\n        // If the network isn't running yet, we will wait\n        if (error.code === Logger.errors.NETWORK_ERROR && error.event === \"noNetwork\") {\n          return undefined;\n        }\n\n        throw error;\n      });\n    });\n  } // @TODO: Remove this and just create a singleton formatter\n\n\n  static getFormatter() {\n    if (defaultFormatter == null) {\n      defaultFormatter = new Formatter();\n    }\n\n    return defaultFormatter;\n  } // @TODO: Remove this and just use getNetwork\n\n\n  static getNetwork(network) {\n    return getNetwork(network == null ? \"homestead\" : network);\n  }\n\n  ccipReadFetch(tx, calldata, urls) {\n    return __awaiter(this, void 0, void 0, function* () {\n      if (this.disableCcipRead || urls.length === 0) {\n        return null;\n      }\n\n      const sender = tx.to.toLowerCase();\n      const data = calldata.toLowerCase();\n      const errorMessages = [];\n\n      for (let i = 0; i < urls.length; i++) {\n        const url = urls[i]; // URL expansion\n\n        const href = url.replace(\"{sender}\", sender).replace(\"{data}\", data); // If no {data} is present, use POST; otherwise GET\n\n        const json = url.indexOf(\"{data}\") >= 0 ? null : JSON.stringify({\n          data,\n          sender\n        });\n        const result = yield fetchJson({\n          url: href,\n          errorPassThrough: true\n        }, json, (value, response) => {\n          value.status = response.statusCode;\n          return value;\n        });\n\n        if (result.data) {\n          return result.data;\n        }\n\n        const errorMessage = result.message || \"unknown error\"; // 4xx indicates the result is not present; stop\n\n        if (result.status >= 400 && result.status < 500) {\n          return logger.throwError(`response not found during CCIP fetch: ${errorMessage}`, Logger.errors.SERVER_ERROR, {\n            url,\n            errorMessage\n          });\n        } // 5xx indicates server issue; try the next url\n\n\n        errorMessages.push(errorMessage);\n      }\n\n      return logger.throwError(`error encountered during CCIP fetch: ${errorMessages.map(m => JSON.stringify(m)).join(\", \")}`, Logger.errors.SERVER_ERROR, {\n        urls,\n        errorMessages\n      });\n    });\n  } // Fetches the blockNumber, but will reuse any result that is less\n  // than maxAge old or has been requested since the last request\n\n\n  _getInternalBlockNumber(maxAge) {\n    return __awaiter(this, void 0, void 0, function* () {\n      yield this._ready(); // Allowing stale data up to maxAge old\n\n      if (maxAge > 0) {\n        // While there are pending internal block requests...\n        while (this._internalBlockNumber) {\n          // ...\"remember\" which fetch we started with\n          const internalBlockNumber = this._internalBlockNumber;\n\n          try {\n            // Check the result is not too stale\n            const result = yield internalBlockNumber;\n\n            if (getTime() - result.respTime <= maxAge) {\n              return result.blockNumber;\n            } // Too old; fetch a new value\n\n\n            break;\n          } catch (error) {\n            // The fetch rejected; if we are the first to get the\n            // rejection, drop through so we replace it with a new\n            // fetch; all others blocked will then get that fetch\n            // which won't match the one they \"remembered\" and loop\n            if (this._internalBlockNumber === internalBlockNumber) {\n              break;\n            }\n          }\n        }\n      }\n\n      const reqTime = getTime();\n      const checkInternalBlockNumber = resolveProperties({\n        blockNumber: this.perform(\"getBlockNumber\", {}),\n        networkError: this.getNetwork().then(network => null, error => error)\n      }).then(({\n        blockNumber,\n        networkError\n      }) => {\n        if (networkError) {\n          // Unremember this bad internal block number\n          if (this._internalBlockNumber === checkInternalBlockNumber) {\n            this._internalBlockNumber = null;\n          }\n\n          throw networkError;\n        }\n\n        const respTime = getTime();\n        blockNumber = BigNumber.from(blockNumber).toNumber();\n\n        if (blockNumber < this._maxInternalBlockNumber) {\n          blockNumber = this._maxInternalBlockNumber;\n        }\n\n        this._maxInternalBlockNumber = blockNumber;\n\n        this._setFastBlockNumber(blockNumber); // @TODO: Still need this?\n\n\n        return {\n          blockNumber,\n          reqTime,\n          respTime\n        };\n      });\n      this._internalBlockNumber = checkInternalBlockNumber; // Swallow unhandled exceptions; if needed they are handled else where\n\n      checkInternalBlockNumber.catch(error => {\n        // Don't null the dead (rejected) fetch, if it has already been updated\n        if (this._internalBlockNumber === checkInternalBlockNumber) {\n          this._internalBlockNumber = null;\n        }\n      });\n      return (yield checkInternalBlockNumber).blockNumber;\n    });\n  }\n\n  poll() {\n    return __awaiter(this, void 0, void 0, function* () {\n      const pollId = nextPollId++; // Track all running promises, so we can trigger a post-poll once they are complete\n\n      const runners = [];\n      let blockNumber = null;\n\n      try {\n        blockNumber = yield this._getInternalBlockNumber(100 + this.pollingInterval / 2);\n      } catch (error) {\n        this.emit(\"error\", error);\n        return;\n      }\n\n      this._setFastBlockNumber(blockNumber); // Emit a poll event after we have the latest (fast) block number\n\n\n      this.emit(\"poll\", pollId, blockNumber); // If the block has not changed, meh.\n\n      if (blockNumber === this._lastBlockNumber) {\n        this.emit(\"didPoll\", pollId);\n        return;\n      } // First polling cycle, trigger a \"block\" events\n\n\n      if (this._emitted.block === -2) {\n        this._emitted.block = blockNumber - 1;\n      }\n\n      if (Math.abs(this._emitted.block - blockNumber) > 1000) {\n        logger.warn(`network block skew detected; skipping block events (emitted=${this._emitted.block} blockNumber${blockNumber})`);\n        this.emit(\"error\", logger.makeError(\"network block skew detected\", Logger.errors.NETWORK_ERROR, {\n          blockNumber: blockNumber,\n          event: \"blockSkew\",\n          previousBlockNumber: this._emitted.block\n        }));\n        this.emit(\"block\", blockNumber);\n      } else {\n        // Notify all listener for each block that has passed\n        for (let i = this._emitted.block + 1; i <= blockNumber; i++) {\n          this.emit(\"block\", i);\n        }\n      } // The emitted block was updated, check for obsolete events\n\n\n      if (this._emitted.block !== blockNumber) {\n        this._emitted.block = blockNumber;\n        Object.keys(this._emitted).forEach(key => {\n          // The block event does not expire\n          if (key === \"block\") {\n            return;\n          } // The block we were at when we emitted this event\n\n\n          const eventBlockNumber = this._emitted[key]; // We cannot garbage collect pending transactions or blocks here\n          // They should be garbage collected by the Provider when setting\n          // \"pending\" events\n\n          if (eventBlockNumber === \"pending\") {\n            return;\n          } // Evict any transaction hashes or block hashes over 12 blocks\n          // old, since they should not return null anyways\n\n\n          if (blockNumber - eventBlockNumber > 12) {\n            delete this._emitted[key];\n          }\n        });\n      } // First polling cycle\n\n\n      if (this._lastBlockNumber === -2) {\n        this._lastBlockNumber = blockNumber - 1;\n      } // Find all transaction hashes we are waiting on\n\n\n      this._events.forEach(event => {\n        switch (event.type) {\n          case \"tx\":\n            {\n              const hash = event.hash;\n              let runner = this.getTransactionReceipt(hash).then(receipt => {\n                if (!receipt || receipt.blockNumber == null) {\n                  return null;\n                }\n\n                this._emitted[\"t:\" + hash] = receipt.blockNumber;\n                this.emit(hash, receipt);\n                return null;\n              }).catch(error => {\n                this.emit(\"error\", error);\n              });\n              runners.push(runner);\n              break;\n            }\n\n          case \"filter\":\n            {\n              // We only allow a single getLogs to be in-flight at a time\n              if (!event._inflight) {\n                event._inflight = true; // Filter from the last known event; due to load-balancing\n                // and some nodes returning updated block numbers before\n                // indexing events, a logs result with 0 entries cannot be\n                // trusted and we must retry a range which includes it again\n\n                const filter = event.filter;\n                filter.fromBlock = event._lastBlockNumber + 1;\n                filter.toBlock = blockNumber; // Prevent fitler ranges from growing too wild\n\n                if (filter.toBlock - this._maxFilterBlockRange > filter.fromBlock) {\n                  filter.fromBlock = filter.toBlock - this._maxFilterBlockRange;\n                }\n\n                const runner = this.getLogs(filter).then(logs => {\n                  // Allow the next getLogs\n                  event._inflight = false;\n\n                  if (logs.length === 0) {\n                    return;\n                  }\n\n                  logs.forEach(log => {\n                    // Only when we get an event for a given block number\n                    // can we trust the events are indexed\n                    if (log.blockNumber > event._lastBlockNumber) {\n                      event._lastBlockNumber = log.blockNumber;\n                    } // Make sure we stall requests to fetch blocks and txs\n\n\n                    this._emitted[\"b:\" + log.blockHash] = log.blockNumber;\n                    this._emitted[\"t:\" + log.transactionHash] = log.blockNumber;\n                    this.emit(filter, log);\n                  });\n                }).catch(error => {\n                  this.emit(\"error\", error); // Allow another getLogs (the range was not updated)\n\n                  event._inflight = false;\n                });\n                runners.push(runner);\n              }\n\n              break;\n            }\n        }\n      });\n\n      this._lastBlockNumber = blockNumber; // Once all events for this loop have been processed, emit \"didPoll\"\n\n      Promise.all(runners).then(() => {\n        this.emit(\"didPoll\", pollId);\n      }).catch(error => {\n        this.emit(\"error\", error);\n      });\n      return;\n    });\n  } // Deprecated; do not use this\n\n\n  resetEventsBlock(blockNumber) {\n    this._lastBlockNumber = blockNumber - 1;\n\n    if (this.polling) {\n      this.poll();\n    }\n  }\n\n  get network() {\n    return this._network;\n  } // This method should query the network if the underlying network\n  // can change, such as when connected to a JSON-RPC backend\n\n\n  detectNetwork() {\n    return __awaiter(this, void 0, void 0, function* () {\n      return logger.throwError(\"provider does not support network detection\", Logger.errors.UNSUPPORTED_OPERATION, {\n        operation: \"provider.detectNetwork\"\n      });\n    });\n  }\n\n  getNetwork() {\n    return __awaiter(this, void 0, void 0, function* () {\n      const network = yield this._ready(); // Make sure we are still connected to the same network; this is\n      // only an external call for backends which can have the underlying\n      // network change spontaneously\n\n      const currentNetwork = yield this.detectNetwork();\n\n      if (network.chainId !== currentNetwork.chainId) {\n        // We are allowing network changes, things can get complex fast;\n        // make sure you know what you are doing if you use \"any\"\n        if (this.anyNetwork) {\n          this._network = currentNetwork; // Reset all internal block number guards and caches\n\n          this._lastBlockNumber = -2;\n          this._fastBlockNumber = null;\n          this._fastBlockNumberPromise = null;\n          this._fastQueryDate = 0;\n          this._emitted.block = -2;\n          this._maxInternalBlockNumber = -1024;\n          this._internalBlockNumber = null; // The \"network\" event MUST happen before this method resolves\n          // so any events have a chance to unregister, so we stall an\n          // additional event loop before returning from /this/ call\n\n          this.emit(\"network\", currentNetwork, network);\n          yield stall(0);\n          return this._network;\n        }\n\n        const error = logger.makeError(\"underlying network changed\", Logger.errors.NETWORK_ERROR, {\n          event: \"changed\",\n          network: network,\n          detectedNetwork: currentNetwork\n        });\n        this.emit(\"error\", error);\n        throw error;\n      }\n\n      return network;\n    });\n  }\n\n  get blockNumber() {\n    this._getInternalBlockNumber(100 + this.pollingInterval / 2).then(blockNumber => {\n      this._setFastBlockNumber(blockNumber);\n    }, error => {});\n\n    return this._fastBlockNumber != null ? this._fastBlockNumber : -1;\n  }\n\n  get polling() {\n    return this._poller != null;\n  }\n\n  set polling(value) {\n    if (value && !this._poller) {\n      this._poller = setInterval(() => {\n        this.poll();\n      }, this.pollingInterval);\n\n      if (!this._bootstrapPoll) {\n        this._bootstrapPoll = setTimeout(() => {\n          this.poll(); // We block additional polls until the polling interval\n          // is done, to prevent overwhelming the poll function\n\n          this._bootstrapPoll = setTimeout(() => {\n            // If polling was disabled, something may require a poke\n            // since starting the bootstrap poll and it was disabled\n            if (!this._poller) {\n              this.poll();\n            } // Clear out the bootstrap so we can do another\n\n\n            this._bootstrapPoll = null;\n          }, this.pollingInterval);\n        }, 0);\n      }\n    } else if (!value && this._poller) {\n      clearInterval(this._poller);\n      this._poller = null;\n    }\n  }\n\n  get pollingInterval() {\n    return this._pollingInterval;\n  }\n\n  set pollingInterval(value) {\n    if (typeof value !== \"number\" || value <= 0 || parseInt(String(value)) != value) {\n      throw new Error(\"invalid polling interval\");\n    }\n\n    this._pollingInterval = value;\n\n    if (this._poller) {\n      clearInterval(this._poller);\n      this._poller = setInterval(() => {\n        this.poll();\n      }, this._pollingInterval);\n    }\n  }\n\n  _getFastBlockNumber() {\n    const now = getTime(); // Stale block number, request a newer value\n\n    if (now - this._fastQueryDate > 2 * this._pollingInterval) {\n      this._fastQueryDate = now;\n      this._fastBlockNumberPromise = this.getBlockNumber().then(blockNumber => {\n        if (this._fastBlockNumber == null || blockNumber > this._fastBlockNumber) {\n          this._fastBlockNumber = blockNumber;\n        }\n\n        return this._fastBlockNumber;\n      });\n    }\n\n    return this._fastBlockNumberPromise;\n  }\n\n  _setFastBlockNumber(blockNumber) {\n    // Older block, maybe a stale request\n    if (this._fastBlockNumber != null && blockNumber < this._fastBlockNumber) {\n      return;\n    } // Update the time we updated the blocknumber\n\n\n    this._fastQueryDate = getTime(); // Newer block number, use  it\n\n    if (this._fastBlockNumber == null || blockNumber > this._fastBlockNumber) {\n      this._fastBlockNumber = blockNumber;\n      this._fastBlockNumberPromise = Promise.resolve(blockNumber);\n    }\n  }\n\n  waitForTransaction(transactionHash, confirmations, timeout) {\n    return __awaiter(this, void 0, void 0, function* () {\n      return this._waitForTransaction(transactionHash, confirmations == null ? 1 : confirmations, timeout || 0, null);\n    });\n  }\n\n  _waitForTransaction(transactionHash, confirmations, timeout, replaceable) {\n    return __awaiter(this, void 0, void 0, function* () {\n      const receipt = yield this.getTransactionReceipt(transactionHash); // Receipt is already good\n\n      if ((receipt ? receipt.confirmations : 0) >= confirmations) {\n        return receipt;\n      } // Poll until the receipt is good...\n\n\n      return new Promise((resolve, reject) => {\n        const cancelFuncs = [];\n        let done = false;\n\n        const alreadyDone = function () {\n          if (done) {\n            return true;\n          }\n\n          done = true;\n          cancelFuncs.forEach(func => {\n            func();\n          });\n          return false;\n        };\n\n        const minedHandler = receipt => {\n          if (receipt.confirmations < confirmations) {\n            return;\n          }\n\n          if (alreadyDone()) {\n            return;\n          }\n\n          resolve(receipt);\n        };\n\n        this.on(transactionHash, minedHandler);\n        cancelFuncs.push(() => {\n          this.removeListener(transactionHash, minedHandler);\n        });\n\n        if (replaceable) {\n          let lastBlockNumber = replaceable.startBlock;\n          let scannedBlock = null;\n\n          const replaceHandler = blockNumber => __awaiter(this, void 0, void 0, function* () {\n            if (done) {\n              return;\n            } // Wait 1 second; this is only used in the case of a fault, so\n            // we will trade off a little bit of latency for more consistent\n            // results and fewer JSON-RPC calls\n\n\n            yield stall(1000);\n            this.getTransactionCount(replaceable.from).then(nonce => __awaiter(this, void 0, void 0, function* () {\n              if (done) {\n                return;\n              }\n\n              if (nonce <= replaceable.nonce) {\n                lastBlockNumber = blockNumber;\n              } else {\n                // First check if the transaction was mined\n                {\n                  const mined = yield this.getTransaction(transactionHash);\n\n                  if (mined && mined.blockNumber != null) {\n                    return;\n                  }\n                } // First time scanning. We start a little earlier for some\n                // wiggle room here to handle the eventually consistent nature\n                // of blockchain (e.g. the getTransactionCount was for a\n                // different block)\n\n                if (scannedBlock == null) {\n                  scannedBlock = lastBlockNumber - 3;\n\n                  if (scannedBlock < replaceable.startBlock) {\n                    scannedBlock = replaceable.startBlock;\n                  }\n                }\n\n                while (scannedBlock <= blockNumber) {\n                  if (done) {\n                    return;\n                  }\n\n                  const block = yield this.getBlockWithTransactions(scannedBlock);\n\n                  for (let ti = 0; ti < block.transactions.length; ti++) {\n                    const tx = block.transactions[ti]; // Successfully mined!\n\n                    if (tx.hash === transactionHash) {\n                      return;\n                    } // Matches our transaction from and nonce; its a replacement\n\n\n                    if (tx.from === replaceable.from && tx.nonce === replaceable.nonce) {\n                      if (done) {\n                        return;\n                      } // Get the receipt of the replacement\n\n\n                      const receipt = yield this.waitForTransaction(tx.hash, confirmations); // Already resolved or rejected (prolly a timeout)\n\n                      if (alreadyDone()) {\n                        return;\n                      } // The reason we were replaced\n\n\n                      let reason = \"replaced\";\n\n                      if (tx.data === replaceable.data && tx.to === replaceable.to && tx.value.eq(replaceable.value)) {\n                        reason = \"repriced\";\n                      } else if (tx.data === \"0x\" && tx.from === tx.to && tx.value.isZero()) {\n                        reason = \"cancelled\";\n                      } // Explain why we were replaced\n\n\n                      reject(logger.makeError(\"transaction was replaced\", Logger.errors.TRANSACTION_REPLACED, {\n                        cancelled: reason === \"replaced\" || reason === \"cancelled\",\n                        reason,\n                        replacement: this._wrapTransaction(tx),\n                        hash: transactionHash,\n                        receipt\n                      }));\n                      return;\n                    }\n                  }\n\n                  scannedBlock++;\n                }\n              }\n\n              if (done) {\n                return;\n              }\n\n              this.once(\"block\", replaceHandler);\n            }), error => {\n              if (done) {\n                return;\n              }\n\n              this.once(\"block\", replaceHandler);\n            });\n          });\n\n          if (done) {\n            return;\n          }\n\n          this.once(\"block\", replaceHandler);\n          cancelFuncs.push(() => {\n            this.removeListener(\"block\", replaceHandler);\n          });\n        }\n\n        if (typeof timeout === \"number\" && timeout > 0) {\n          const timer = setTimeout(() => {\n            if (alreadyDone()) {\n              return;\n            }\n\n            reject(logger.makeError(\"timeout exceeded\", Logger.errors.TIMEOUT, {\n              timeout: timeout\n            }));\n          }, timeout);\n\n          if (timer.unref) {\n            timer.unref();\n          }\n\n          cancelFuncs.push(() => {\n            clearTimeout(timer);\n          });\n        }\n      });\n    });\n  }\n\n  getBlockNumber() {\n    return __awaiter(this, void 0, void 0, function* () {\n      return this._getInternalBlockNumber(0);\n    });\n  }\n\n  getGasPrice() {\n    return __awaiter(this, void 0, void 0, function* () {\n      yield this.getNetwork();\n      const result = yield this.perform(\"getGasPrice\", {});\n\n      try {\n        return BigNumber.from(result);\n      } catch (error) {\n        return logger.throwError(\"bad result from backend\", Logger.errors.SERVER_ERROR, {\n          method: \"getGasPrice\",\n          result,\n          error\n        });\n      }\n    });\n  }\n\n  getBalance(addressOrName, blockTag) {\n    return __awaiter(this, void 0, void 0, function* () {\n      yield this.getNetwork();\n      const params = yield resolveProperties({\n        address: this._getAddress(addressOrName),\n        blockTag: this._getBlockTag(blockTag)\n      });\n      const result = yield this.perform(\"getBalance\", params);\n\n      try {\n        return BigNumber.from(result);\n      } catch (error) {\n        return logger.throwError(\"bad result from backend\", Logger.errors.SERVER_ERROR, {\n          method: \"getBalance\",\n          params,\n          result,\n          error\n        });\n      }\n    });\n  }\n\n  getTransactionCount(addressOrName, blockTag) {\n    return __awaiter(this, void 0, void 0, function* () {\n      yield this.getNetwork();\n      const params = yield resolveProperties({\n        address: this._getAddress(addressOrName),\n        blockTag: this._getBlockTag(blockTag)\n      });\n      const result = yield this.perform(\"getTransactionCount\", params);\n\n      try {\n        return BigNumber.from(result).toNumber();\n      } catch (error) {\n        return logger.throwError(\"bad result from backend\", Logger.errors.SERVER_ERROR, {\n          method: \"getTransactionCount\",\n          params,\n          result,\n          error\n        });\n      }\n    });\n  }\n\n  getCode(addressOrName, blockTag) {\n    return __awaiter(this, void 0, void 0, function* () {\n      yield this.getNetwork();\n      const params = yield resolveProperties({\n        address: this._getAddress(addressOrName),\n        blockTag: this._getBlockTag(blockTag)\n      });\n      const result = yield this.perform(\"getCode\", params);\n\n      try {\n        return hexlify(result);\n      } catch (error) {\n        return logger.throwError(\"bad result from backend\", Logger.errors.SERVER_ERROR, {\n          method: \"getCode\",\n          params,\n          result,\n          error\n        });\n      }\n    });\n  }\n\n  getStorageAt(addressOrName, position, blockTag) {\n    return __awaiter(this, void 0, void 0, function* () {\n      yield this.getNetwork();\n      const params = yield resolveProperties({\n        address: this._getAddress(addressOrName),\n        blockTag: this._getBlockTag(blockTag),\n        position: Promise.resolve(position).then(p => hexValue(p))\n      });\n      const result = yield this.perform(\"getStorageAt\", params);\n\n      try {\n        return hexlify(result);\n      } catch (error) {\n        return logger.throwError(\"bad result from backend\", Logger.errors.SERVER_ERROR, {\n          method: \"getStorageAt\",\n          params,\n          result,\n          error\n        });\n      }\n    });\n  } // This should be called by any subclass wrapping a TransactionResponse\n\n\n  _wrapTransaction(tx, hash, startBlock) {\n    if (hash != null && hexDataLength(hash) !== 32) {\n      throw new Error(\"invalid response - sendTransaction\");\n    }\n\n    const result = tx; // Check the hash we expect is the same as the hash the server reported\n\n    if (hash != null && tx.hash !== hash) {\n      logger.throwError(\"Transaction hash mismatch from Provider.sendTransaction.\", Logger.errors.UNKNOWN_ERROR, {\n        expectedHash: tx.hash,\n        returnedHash: hash\n      });\n    }\n\n    result.wait = (confirms, timeout) => __awaiter(this, void 0, void 0, function* () {\n      if (confirms == null) {\n        confirms = 1;\n      }\n\n      if (timeout == null) {\n        timeout = 0;\n      } // Get the details to detect replacement\n\n\n      let replacement = undefined;\n\n      if (confirms !== 0 && startBlock != null) {\n        replacement = {\n          data: tx.data,\n          from: tx.from,\n          nonce: tx.nonce,\n          to: tx.to,\n          value: tx.value,\n          startBlock\n        };\n      }\n\n      const receipt = yield this._waitForTransaction(tx.hash, confirms, timeout, replacement);\n\n      if (receipt == null && confirms === 0) {\n        return null;\n      } // No longer pending, allow the polling loop to garbage collect this\n\n\n      this._emitted[\"t:\" + tx.hash] = receipt.blockNumber;\n\n      if (receipt.status === 0) {\n        logger.throwError(\"transaction failed\", Logger.errors.CALL_EXCEPTION, {\n          transactionHash: tx.hash,\n          transaction: tx,\n          receipt: receipt\n        });\n      }\n\n      return receipt;\n    });\n\n    return result;\n  }\n\n  sendTransaction(signedTransaction) {\n    return __awaiter(this, void 0, void 0, function* () {\n      yield this.getNetwork();\n      const hexTx = yield Promise.resolve(signedTransaction).then(t => hexlify(t));\n      const tx = this.formatter.transaction(signedTransaction);\n\n      if (tx.confirmations == null) {\n        tx.confirmations = 0;\n      }\n\n      const blockNumber = yield this._getInternalBlockNumber(100 + 2 * this.pollingInterval);\n\n      try {\n        const hash = yield this.perform(\"sendTransaction\", {\n          signedTransaction: hexTx\n        });\n        return this._wrapTransaction(tx, hash, blockNumber);\n      } catch (error) {\n        error.transaction = tx;\n        error.transactionHash = tx.hash;\n        throw error;\n      }\n    });\n  }\n\n  _getTransactionRequest(transaction) {\n    return __awaiter(this, void 0, void 0, function* () {\n      const values = yield transaction;\n      const tx = {};\n      [\"from\", \"to\"].forEach(key => {\n        if (values[key] == null) {\n          return;\n        }\n\n        tx[key] = Promise.resolve(values[key]).then(v => v ? this._getAddress(v) : null);\n      });\n      [\"gasLimit\", \"gasPrice\", \"maxFeePerGas\", \"maxPriorityFeePerGas\", \"value\"].forEach(key => {\n        if (values[key] == null) {\n          return;\n        }\n\n        tx[key] = Promise.resolve(values[key]).then(v => v ? BigNumber.from(v) : null);\n      });\n      [\"type\"].forEach(key => {\n        if (values[key] == null) {\n          return;\n        }\n\n        tx[key] = Promise.resolve(values[key]).then(v => v != null ? v : null);\n      });\n\n      if (values.accessList) {\n        tx.accessList = this.formatter.accessList(values.accessList);\n      }\n\n      [\"data\"].forEach(key => {\n        if (values[key] == null) {\n          return;\n        }\n\n        tx[key] = Promise.resolve(values[key]).then(v => v ? hexlify(v) : null);\n      });\n      return this.formatter.transactionRequest(yield resolveProperties(tx));\n    });\n  }\n\n  _getFilter(filter) {\n    return __awaiter(this, void 0, void 0, function* () {\n      filter = yield filter;\n      const result = {};\n\n      if (filter.address != null) {\n        result.address = this._getAddress(filter.address);\n      }\n\n      [\"blockHash\", \"topics\"].forEach(key => {\n        if (filter[key] == null) {\n          return;\n        }\n\n        result[key] = filter[key];\n      });\n      [\"fromBlock\", \"toBlock\"].forEach(key => {\n        if (filter[key] == null) {\n          return;\n        }\n\n        result[key] = this._getBlockTag(filter[key]);\n      });\n      return this.formatter.filter(yield resolveProperties(result));\n    });\n  }\n\n  _call(transaction, blockTag, attempt) {\n    return __awaiter(this, void 0, void 0, function* () {\n      if (attempt >= MAX_CCIP_REDIRECTS) {\n        logger.throwError(\"CCIP read exceeded maximum redirections\", Logger.errors.SERVER_ERROR, {\n          redirects: attempt,\n          transaction\n        });\n      }\n\n      const txSender = transaction.to;\n      const result = yield this.perform(\"call\", {\n        transaction,\n        blockTag\n      }); // CCIP Read request via OffchainLookup(address,string[],bytes,bytes4,bytes)\n\n      if (attempt >= 0 && blockTag === \"latest\" && txSender != null && result.substring(0, 10) === \"0x556f1830\" && hexDataLength(result) % 32 === 4) {\n        try {\n          const data = hexDataSlice(result, 4); // Check the sender of the OffchainLookup matches the transaction\n\n          const sender = hexDataSlice(data, 0, 32);\n\n          if (!BigNumber.from(sender).eq(txSender)) {\n            logger.throwError(\"CCIP Read sender did not match\", Logger.errors.CALL_EXCEPTION, {\n              name: \"OffchainLookup\",\n              signature: \"OffchainLookup(address,string[],bytes,bytes4,bytes)\",\n              transaction,\n              data: result\n            });\n          } // Read the URLs from the response\n\n\n          const urls = [];\n          const urlsOffset = BigNumber.from(hexDataSlice(data, 32, 64)).toNumber();\n          const urlsLength = BigNumber.from(hexDataSlice(data, urlsOffset, urlsOffset + 32)).toNumber();\n          const urlsData = hexDataSlice(data, urlsOffset + 32);\n\n          for (let u = 0; u < urlsLength; u++) {\n            const url = _parseString(urlsData, u * 32);\n\n            if (url == null) {\n              logger.throwError(\"CCIP Read contained corrupt URL string\", Logger.errors.CALL_EXCEPTION, {\n                name: \"OffchainLookup\",\n                signature: \"OffchainLookup(address,string[],bytes,bytes4,bytes)\",\n                transaction,\n                data: result\n              });\n            }\n\n            urls.push(url);\n          } // Get the CCIP calldata to forward\n\n\n          const calldata = _parseBytes(data, 64); // Get the callbackSelector (bytes4)\n\n\n          if (!BigNumber.from(hexDataSlice(data, 100, 128)).isZero()) {\n            logger.throwError(\"CCIP Read callback selector included junk\", Logger.errors.CALL_EXCEPTION, {\n              name: \"OffchainLookup\",\n              signature: \"OffchainLookup(address,string[],bytes,bytes4,bytes)\",\n              transaction,\n              data: result\n            });\n          }\n\n          const callbackSelector = hexDataSlice(data, 96, 100); // Get the extra data to send back to the contract as context\n\n          const extraData = _parseBytes(data, 128);\n\n          const ccipResult = yield this.ccipReadFetch(transaction, calldata, urls);\n\n          if (ccipResult == null) {\n            logger.throwError(\"CCIP Read disabled or provided no URLs\", Logger.errors.CALL_EXCEPTION, {\n              name: \"OffchainLookup\",\n              signature: \"OffchainLookup(address,string[],bytes,bytes4,bytes)\",\n              transaction,\n              data: result\n            });\n          }\n\n          const tx = {\n            to: txSender,\n            data: hexConcat([callbackSelector, encodeBytes([ccipResult, extraData])])\n          };\n          return this._call(tx, blockTag, attempt + 1);\n        } catch (error) {\n          if (error.code === Logger.errors.SERVER_ERROR) {\n            throw error;\n          }\n        }\n      }\n\n      try {\n        return hexlify(result);\n      } catch (error) {\n        return logger.throwError(\"bad result from backend\", Logger.errors.SERVER_ERROR, {\n          method: \"call\",\n          params: {\n            transaction,\n            blockTag\n          },\n          result,\n          error\n        });\n      }\n    });\n  }\n\n  call(transaction, blockTag) {\n    return __awaiter(this, void 0, void 0, function* () {\n      yield this.getNetwork();\n      const resolved = yield resolveProperties({\n        transaction: this._getTransactionRequest(transaction),\n        blockTag: this._getBlockTag(blockTag),\n        ccipReadEnabled: Promise.resolve(transaction.ccipReadEnabled)\n      });\n      return this._call(resolved.transaction, resolved.blockTag, resolved.ccipReadEnabled ? 0 : -1);\n    });\n  }\n\n  estimateGas(transaction) {\n    return __awaiter(this, void 0, void 0, function* () {\n      yield this.getNetwork();\n      const params = yield resolveProperties({\n        transaction: this._getTransactionRequest(transaction)\n      });\n      const result = yield this.perform(\"estimateGas\", params);\n\n      try {\n        return BigNumber.from(result);\n      } catch (error) {\n        return logger.throwError(\"bad result from backend\", Logger.errors.SERVER_ERROR, {\n          method: \"estimateGas\",\n          params,\n          result,\n          error\n        });\n      }\n    });\n  }\n\n  _getAddress(addressOrName) {\n    return __awaiter(this, void 0, void 0, function* () {\n      addressOrName = yield addressOrName;\n\n      if (typeof addressOrName !== \"string\") {\n        logger.throwArgumentError(\"invalid address or ENS name\", \"name\", addressOrName);\n      }\n\n      const address = yield this.resolveName(addressOrName);\n\n      if (address == null) {\n        logger.throwError(\"ENS name not configured\", Logger.errors.UNSUPPORTED_OPERATION, {\n          operation: `resolveName(${JSON.stringify(addressOrName)})`\n        });\n      }\n\n      return address;\n    });\n  }\n\n  _getBlock(blockHashOrBlockTag, includeTransactions) {\n    return __awaiter(this, void 0, void 0, function* () {\n      yield this.getNetwork();\n      blockHashOrBlockTag = yield blockHashOrBlockTag; // If blockTag is a number (not \"latest\", etc), this is the block number\n\n      let blockNumber = -128;\n      const params = {\n        includeTransactions: !!includeTransactions\n      };\n\n      if (isHexString(blockHashOrBlockTag, 32)) {\n        params.blockHash = blockHashOrBlockTag;\n      } else {\n        try {\n          params.blockTag = yield this._getBlockTag(blockHashOrBlockTag);\n\n          if (isHexString(params.blockTag)) {\n            blockNumber = parseInt(params.blockTag.substring(2), 16);\n          }\n        } catch (error) {\n          logger.throwArgumentError(\"invalid block hash or block tag\", \"blockHashOrBlockTag\", blockHashOrBlockTag);\n        }\n      }\n\n      return poll(() => __awaiter(this, void 0, void 0, function* () {\n        const block = yield this.perform(\"getBlock\", params); // Block was not found\n\n        if (block == null) {\n          // For blockhashes, if we didn't say it existed, that blockhash may\n          // not exist. If we did see it though, perhaps from a log, we know\n          // it exists, and this node is just not caught up yet.\n          if (params.blockHash != null) {\n            if (this._emitted[\"b:\" + params.blockHash] == null) {\n              return null;\n            }\n          } // For block tags, if we are asking for a future block, we return null\n\n\n          if (params.blockTag != null) {\n            if (blockNumber > this._emitted.block) {\n              return null;\n            }\n          } // Retry on the next block\n\n\n          return undefined;\n        } // Add transactions\n\n\n        if (includeTransactions) {\n          let blockNumber = null;\n\n          for (let i = 0; i < block.transactions.length; i++) {\n            const tx = block.transactions[i];\n\n            if (tx.blockNumber == null) {\n              tx.confirmations = 0;\n            } else if (tx.confirmations == null) {\n              if (blockNumber == null) {\n                blockNumber = yield this._getInternalBlockNumber(100 + 2 * this.pollingInterval);\n              } // Add the confirmations using the fast block number (pessimistic)\n\n\n              let confirmations = blockNumber - tx.blockNumber + 1;\n\n              if (confirmations <= 0) {\n                confirmations = 1;\n              }\n\n              tx.confirmations = confirmations;\n            }\n          }\n\n          const blockWithTxs = this.formatter.blockWithTransactions(block);\n          blockWithTxs.transactions = blockWithTxs.transactions.map(tx => this._wrapTransaction(tx));\n          return blockWithTxs;\n        }\n\n        return this.formatter.block(block);\n      }), {\n        oncePoll: this\n      });\n    });\n  }\n\n  getBlock(blockHashOrBlockTag) {\n    return this._getBlock(blockHashOrBlockTag, false);\n  }\n\n  getBlockWithTransactions(blockHashOrBlockTag) {\n    return this._getBlock(blockHashOrBlockTag, true);\n  }\n\n  getTransaction(transactionHash) {\n    return __awaiter(this, void 0, void 0, function* () {\n      yield this.getNetwork();\n      transactionHash = yield transactionHash;\n      const params = {\n        transactionHash: this.formatter.hash(transactionHash, true)\n      };\n      return poll(() => __awaiter(this, void 0, void 0, function* () {\n        const result = yield this.perform(\"getTransaction\", params);\n\n        if (result == null) {\n          if (this._emitted[\"t:\" + transactionHash] == null) {\n            return null;\n          }\n\n          return undefined;\n        }\n\n        const tx = this.formatter.transactionResponse(result);\n\n        if (tx.blockNumber == null) {\n          tx.confirmations = 0;\n        } else if (tx.confirmations == null) {\n          const blockNumber = yield this._getInternalBlockNumber(100 + 2 * this.pollingInterval); // Add the confirmations using the fast block number (pessimistic)\n\n          let confirmations = blockNumber - tx.blockNumber + 1;\n\n          if (confirmations <= 0) {\n            confirmations = 1;\n          }\n\n          tx.confirmations = confirmations;\n        }\n\n        return this._wrapTransaction(tx);\n      }), {\n        oncePoll: this\n      });\n    });\n  }\n\n  getTransactionReceipt(transactionHash) {\n    return __awaiter(this, void 0, void 0, function* () {\n      yield this.getNetwork();\n      transactionHash = yield transactionHash;\n      const params = {\n        transactionHash: this.formatter.hash(transactionHash, true)\n      };\n      return poll(() => __awaiter(this, void 0, void 0, function* () {\n        const result = yield this.perform(\"getTransactionReceipt\", params);\n\n        if (result == null) {\n          if (this._emitted[\"t:\" + transactionHash] == null) {\n            return null;\n          }\n\n          return undefined;\n        } // \"geth-etc\" returns receipts before they are ready\n\n\n        if (result.blockHash == null) {\n          return undefined;\n        }\n\n        const receipt = this.formatter.receipt(result);\n\n        if (receipt.blockNumber == null) {\n          receipt.confirmations = 0;\n        } else if (receipt.confirmations == null) {\n          const blockNumber = yield this._getInternalBlockNumber(100 + 2 * this.pollingInterval); // Add the confirmations using the fast block number (pessimistic)\n\n          let confirmations = blockNumber - receipt.blockNumber + 1;\n\n          if (confirmations <= 0) {\n            confirmations = 1;\n          }\n\n          receipt.confirmations = confirmations;\n        }\n\n        return receipt;\n      }), {\n        oncePoll: this\n      });\n    });\n  }\n\n  getLogs(filter) {\n    return __awaiter(this, void 0, void 0, function* () {\n      yield this.getNetwork();\n      const params = yield resolveProperties({\n        filter: this._getFilter(filter)\n      });\n      const logs = yield this.perform(\"getLogs\", params);\n      logs.forEach(log => {\n        if (log.removed == null) {\n          log.removed = false;\n        }\n      });\n      return Formatter.arrayOf(this.formatter.filterLog.bind(this.formatter))(logs);\n    });\n  }\n\n  getEtherPrice() {\n    return __awaiter(this, void 0, void 0, function* () {\n      yield this.getNetwork();\n      return this.perform(\"getEtherPrice\", {});\n    });\n  }\n\n  _getBlockTag(blockTag) {\n    return __awaiter(this, void 0, void 0, function* () {\n      blockTag = yield blockTag;\n\n      if (typeof blockTag === \"number\" && blockTag < 0) {\n        if (blockTag % 1) {\n          logger.throwArgumentError(\"invalid BlockTag\", \"blockTag\", blockTag);\n        }\n\n        let blockNumber = yield this._getInternalBlockNumber(100 + 2 * this.pollingInterval);\n        blockNumber += blockTag;\n\n        if (blockNumber < 0) {\n          blockNumber = 0;\n        }\n\n        return this.formatter.blockTag(blockNumber);\n      }\n\n      return this.formatter.blockTag(blockTag);\n    });\n  }\n\n  getResolver(name) {\n    return __awaiter(this, void 0, void 0, function* () {\n      let currentName = name;\n\n      while (true) {\n        if (currentName === \"\" || currentName === \".\") {\n          return null;\n        } // Optimization since the eth node cannot change and does\n        // not have a wildcard resolver\n\n\n        if (name !== \"eth\" && currentName === \"eth\") {\n          return null;\n        } // Check the current node for a resolver\n\n\n        const addr = yield this._getResolver(currentName, \"getResolver\"); // Found a resolver!\n\n        if (addr != null) {\n          const resolver = new Resolver(this, addr, name); // Legacy resolver found, using EIP-2544 so it isn't safe to use\n\n          if (currentName !== name && !(yield resolver.supportsWildcard())) {\n            return null;\n          }\n\n          return resolver;\n        } // Get the parent node\n\n\n        currentName = currentName.split(\".\").slice(1).join(\".\");\n      }\n    });\n  }\n\n  _getResolver(name, operation) {\n    return __awaiter(this, void 0, void 0, function* () {\n      if (operation == null) {\n        operation = \"ENS\";\n      }\n\n      const network = yield this.getNetwork(); // No ENS...\n\n      if (!network.ensAddress) {\n        logger.throwError(\"network does not support ENS\", Logger.errors.UNSUPPORTED_OPERATION, {\n          operation,\n          network: network.name\n        });\n      }\n\n      try {\n        // keccak256(\"resolver(bytes32)\")\n        const addrData = yield this.call({\n          to: network.ensAddress,\n          data: \"0x0178b8bf\" + namehash(name).substring(2)\n        });\n        return this.formatter.callAddress(addrData);\n      } catch (error) {// ENS registry cannot throw errors on resolver(bytes32)\n      }\n\n      return null;\n    });\n  }\n\n  resolveName(name) {\n    return __awaiter(this, void 0, void 0, function* () {\n      name = yield name; // If it is already an address, nothing to resolve\n\n      try {\n        return Promise.resolve(this.formatter.address(name));\n      } catch (error) {\n        // If is is a hexstring, the address is bad (See #694)\n        if (isHexString(name)) {\n          throw error;\n        }\n      }\n\n      if (typeof name !== \"string\") {\n        logger.throwArgumentError(\"invalid ENS name\", \"name\", name);\n      } // Get the addr from the resolver\n\n\n      const resolver = yield this.getResolver(name);\n\n      if (!resolver) {\n        return null;\n      }\n\n      return yield resolver.getAddress();\n    });\n  }\n\n  lookupAddress(address) {\n    return __awaiter(this, void 0, void 0, function* () {\n      address = yield address;\n      address = this.formatter.address(address);\n      const node = address.substring(2).toLowerCase() + \".addr.reverse\";\n      const resolverAddr = yield this._getResolver(node, \"lookupAddress\");\n\n      if (resolverAddr == null) {\n        return null;\n      } // keccak(\"name(bytes32)\")\n\n\n      const name = _parseString(yield this.call({\n        to: resolverAddr,\n        data: \"0x691f3431\" + namehash(node).substring(2)\n      }), 0);\n\n      const addr = yield this.resolveName(name);\n\n      if (addr != address) {\n        return null;\n      }\n\n      return name;\n    });\n  }\n\n  getAvatar(nameOrAddress) {\n    return __awaiter(this, void 0, void 0, function* () {\n      let resolver = null;\n\n      if (isHexString(nameOrAddress)) {\n        // Address; reverse lookup\n        const address = this.formatter.address(nameOrAddress);\n        const node = address.substring(2).toLowerCase() + \".addr.reverse\";\n        const resolverAddress = yield this._getResolver(node, \"getAvatar\");\n\n        if (!resolverAddress) {\n          return null;\n        } // Try resolving the avatar against the addr.reverse resolver\n\n\n        resolver = new Resolver(this, resolverAddress, node);\n\n        try {\n          const avatar = yield resolver.getAvatar();\n\n          if (avatar) {\n            return avatar.url;\n          }\n        } catch (error) {\n          if (error.code !== Logger.errors.CALL_EXCEPTION) {\n            throw error;\n          }\n        } // Try getting the name and performing forward lookup; allowing wildcards\n\n\n        try {\n          // keccak(\"name(bytes32)\")\n          const name = _parseString(yield this.call({\n            to: resolverAddress,\n            data: \"0x691f3431\" + namehash(node).substring(2)\n          }), 0);\n\n          resolver = yield this.getResolver(name);\n        } catch (error) {\n          if (error.code !== Logger.errors.CALL_EXCEPTION) {\n            throw error;\n          }\n\n          return null;\n        }\n      } else {\n        // ENS name; forward lookup with wildcard\n        resolver = yield this.getResolver(nameOrAddress);\n\n        if (!resolver) {\n          return null;\n        }\n      }\n\n      const avatar = yield resolver.getAvatar();\n\n      if (avatar == null) {\n        return null;\n      }\n\n      return avatar.url;\n    });\n  }\n\n  perform(method, params) {\n    return logger.throwError(method + \" not implemented\", Logger.errors.NOT_IMPLEMENTED, {\n      operation: method\n    });\n  }\n\n  _startEvent(event) {\n    this.polling = this._events.filter(e => e.pollable()).length > 0;\n  }\n\n  _stopEvent(event) {\n    this.polling = this._events.filter(e => e.pollable()).length > 0;\n  }\n\n  _addEventListener(eventName, listener, once) {\n    const event = new Event(getEventTag(eventName), listener, once);\n\n    this._events.push(event);\n\n    this._startEvent(event);\n\n    return this;\n  }\n\n  on(eventName, listener) {\n    return this._addEventListener(eventName, listener, false);\n  }\n\n  once(eventName, listener) {\n    return this._addEventListener(eventName, listener, true);\n  }\n\n  emit(eventName, ...args) {\n    let result = false;\n    let stopped = [];\n    let eventTag = getEventTag(eventName);\n    this._events = this._events.filter(event => {\n      if (event.tag !== eventTag) {\n        return true;\n      }\n\n      setTimeout(() => {\n        event.listener.apply(this, args);\n      }, 0);\n      result = true;\n\n      if (event.once) {\n        stopped.push(event);\n        return false;\n      }\n\n      return true;\n    });\n    stopped.forEach(event => {\n      this._stopEvent(event);\n    });\n    return result;\n  }\n\n  listenerCount(eventName) {\n    if (!eventName) {\n      return this._events.length;\n    }\n\n    let eventTag = getEventTag(eventName);\n    return this._events.filter(event => {\n      return event.tag === eventTag;\n    }).length;\n  }\n\n  listeners(eventName) {\n    if (eventName == null) {\n      return this._events.map(event => event.listener);\n    }\n\n    let eventTag = getEventTag(eventName);\n    return this._events.filter(event => event.tag === eventTag).map(event => event.listener);\n  }\n\n  off(eventName, listener) {\n    if (listener == null) {\n      return this.removeAllListeners(eventName);\n    }\n\n    const stopped = [];\n    let found = false;\n    let eventTag = getEventTag(eventName);\n    this._events = this._events.filter(event => {\n      if (event.tag !== eventTag || event.listener != listener) {\n        return true;\n      }\n\n      if (found) {\n        return true;\n      }\n\n      found = true;\n      stopped.push(event);\n      return false;\n    });\n    stopped.forEach(event => {\n      this._stopEvent(event);\n    });\n    return this;\n  }\n\n  removeAllListeners(eventName) {\n    let stopped = [];\n\n    if (eventName == null) {\n      stopped = this._events;\n      this._events = [];\n    } else {\n      const eventTag = getEventTag(eventName);\n      this._events = this._events.filter(event => {\n        if (event.tag !== eventTag) {\n          return true;\n        }\n\n        stopped.push(event);\n        return false;\n      });\n    }\n\n    stopped.forEach(event => {\n      this._stopEvent(event);\n    });\n    return this;\n  }\n\n}","map":{"version":3,"sources":["C:/Users/gabri/Desktop/STAGE/PROGETTOSELLER/ShopChain_Seller/FrontEnd/node_modules/@ethersproject/providers/lib.esm/base-provider.js"],"names":["__awaiter","thisArg","_arguments","P","generator","adopt","value","resolve","Promise","reject","fulfilled","step","next","e","rejected","result","done","then","apply","ForkEvent","Provider","encode","base64Encode","Base58","BigNumber","arrayify","concat","hexConcat","hexDataLength","hexDataSlice","hexlify","hexValue","hexZeroPad","isHexString","HashZero","dnsEncode","namehash","getNetwork","defineReadOnly","getStatic","resolveProperties","sha256","toUtf8Bytes","toUtf8String","fetchJson","poll","bech32","Logger","version","logger","Formatter","MAX_CCIP_REDIRECTS","checkTopic","topic","throwArgumentError","toLowerCase","serializeTopics","topics","slice","length","pop","map","Array","isArray","unique","forEach","sorted","Object","keys","sort","join","deserializeTopics","data","split","comps","getEventTag","eventName","indexOf","isForkEvent","warn","Error","address","getTime","Date","stall","duration","setTimeout","PollableEvents","Event","constructor","tag","listener","once","_lastBlockNumber","_inflight","event","type","hash","filter","pollable","coinInfos","symbol","p2pkh","p2sh","prefix","ilk","bytes32ify","from","toHexString","base58Encode","matcherIpfs","RegExp","matchers","_parseString","start","_parseBytes","error","offset","toNumber","getIpfsLink","link","match","substring","numPad","padded","Uint8Array","set","bytesPad","Math","ceil","encodeBytes","datas","byteCount","i","push","Resolver","provider","name","resolvedAddress","formatter","supportsWildcard","_supportsEip2544","call","to","eq","catch","code","errors","CALL_EXCEPTION","_fetch","selector","parameters","tx","ccipReadEnabled","parseBytes","throwError","transaction","_fetchBytes","_getAddress","coinType","hexBytes","coinInfo","String","UNSUPPORTED_OPERATION","operation","bytes","parseInt","words","toWords","unshift","getAddress","callAddress","getAvatar","linkage","content","avatar","getText","scheme","url","owner","_resolvedAddress","addr","tokenId","tokenOwner","balance","isZero","toString","metadataUrl","replace","metadata","JSON","stringify","imageUrl","image","ipfs","getContentHash","ipns","swarm","skynet","urlSafe","a","key","keyBytes","defaultFormatter","nextPollId","BaseProvider","network","_events","_emitted","block","disableCcipRead","new","target","getFormatter","anyNetwork","detectNetwork","_networkPromise","_ready","knownNetwork","emit","_maxInternalBlockNumber","_maxFilterBlockRange","_pollingInterval","_fastQueryDate","_network","UNKNOWN_ERROR","ready","NETWORK_ERROR","undefined","ccipReadFetch","calldata","urls","sender","errorMessages","href","json","errorPassThrough","response","status","statusCode","errorMessage","message","SERVER_ERROR","m","_getInternalBlockNumber","maxAge","_internalBlockNumber","internalBlockNumber","respTime","blockNumber","reqTime","checkInternalBlockNumber","perform","networkError","_setFastBlockNumber","pollId","runners","pollingInterval","abs","makeError","previousBlockNumber","eventBlockNumber","runner","getTransactionReceipt","receipt","fromBlock","toBlock","getLogs","logs","log","blockHash","transactionHash","all","resetEventsBlock","polling","currentNetwork","chainId","_fastBlockNumber","_fastBlockNumberPromise","detectedNetwork","_poller","setInterval","_bootstrapPoll","clearInterval","_getFastBlockNumber","now","getBlockNumber","waitForTransaction","confirmations","timeout","_waitForTransaction","replaceable","cancelFuncs","alreadyDone","func","minedHandler","on","removeListener","lastBlockNumber","startBlock","scannedBlock","replaceHandler","getTransactionCount","nonce","mined","getTransaction","getBlockWithTransactions","ti","transactions","reason","TRANSACTION_REPLACED","cancelled","replacement","_wrapTransaction","timer","TIMEOUT","unref","clearTimeout","getGasPrice","method","getBalance","addressOrName","blockTag","params","_getBlockTag","getCode","getStorageAt","position","p","expectedHash","returnedHash","wait","confirms","sendTransaction","signedTransaction","hexTx","t","_getTransactionRequest","values","v","accessList","transactionRequest","_getFilter","_call","attempt","redirects","txSender","signature","urlsOffset","urlsLength","urlsData","u","callbackSelector","extraData","ccipResult","resolved","estimateGas","resolveName","_getBlock","blockHashOrBlockTag","includeTransactions","blockWithTxs","blockWithTransactions","oncePoll","getBlock","transactionResponse","removed","arrayOf","filterLog","bind","getEtherPrice","getResolver","currentName","_getResolver","resolver","ensAddress","addrData","lookupAddress","node","resolverAddr","nameOrAddress","resolverAddress","NOT_IMPLEMENTED","_startEvent","_stopEvent","_addEventListener","args","stopped","eventTag","listenerCount","listeners","off","removeAllListeners","found"],"mappings":"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","sourcesContent":["\"use strict\";\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport { ForkEvent, Provider } from \"@ethersproject/abstract-provider\";\nimport { encode as base64Encode } from \"@ethersproject/base64\";\nimport { Base58 } from \"@ethersproject/basex\";\nimport { BigNumber } from \"@ethersproject/bignumber\";\nimport { arrayify, concat, hexConcat, hexDataLength, hexDataSlice, hexlify, hexValue, hexZeroPad, isHexString } from \"@ethersproject/bytes\";\nimport { HashZero } from \"@ethersproject/constants\";\nimport { dnsEncode, namehash } from \"@ethersproject/hash\";\nimport { getNetwork } from \"@ethersproject/networks\";\nimport { defineReadOnly, getStatic, resolveProperties } from \"@ethersproject/properties\";\nimport { sha256 } from \"@ethersproject/sha2\";\nimport { toUtf8Bytes, toUtf8String } from \"@ethersproject/strings\";\nimport { fetchJson, poll } from \"@ethersproject/web\";\nimport bech32 from \"bech32\";\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\nimport { Formatter } from \"./formatter\";\nconst MAX_CCIP_REDIRECTS = 10;\n//////////////////////////////\n// Event Serializeing\nfunction checkTopic(topic) {\n    if (topic == null) {\n        return \"null\";\n    }\n    if (hexDataLength(topic) !== 32) {\n        logger.throwArgumentError(\"invalid topic\", \"topic\", topic);\n    }\n    return topic.toLowerCase();\n}\nfunction serializeTopics(topics) {\n    // Remove trailing null AND-topics; they are redundant\n    topics = topics.slice();\n    while (topics.length > 0 && topics[topics.length - 1] == null) {\n        topics.pop();\n    }\n    return topics.map((topic) => {\n        if (Array.isArray(topic)) {\n            // Only track unique OR-topics\n            const unique = {};\n            topic.forEach((topic) => {\n                unique[checkTopic(topic)] = true;\n            });\n            // The order of OR-topics does not matter\n            const sorted = Object.keys(unique);\n            sorted.sort();\n            return sorted.join(\"|\");\n        }\n        else {\n            return checkTopic(topic);\n        }\n    }).join(\"&\");\n}\nfunction deserializeTopics(data) {\n    if (data === \"\") {\n        return [];\n    }\n    return data.split(/&/g).map((topic) => {\n        if (topic === \"\") {\n            return [];\n        }\n        const comps = topic.split(\"|\").map((topic) => {\n            return ((topic === \"null\") ? null : topic);\n        });\n        return ((comps.length === 1) ? comps[0] : comps);\n    });\n}\nfunction getEventTag(eventName) {\n    if (typeof (eventName) === \"string\") {\n        eventName = eventName.toLowerCase();\n        if (hexDataLength(eventName) === 32) {\n            return \"tx:\" + eventName;\n        }\n        if (eventName.indexOf(\":\") === -1) {\n            return eventName;\n        }\n    }\n    else if (Array.isArray(eventName)) {\n        return \"filter:*:\" + serializeTopics(eventName);\n    }\n    else if (ForkEvent.isForkEvent(eventName)) {\n        logger.warn(\"not implemented\");\n        throw new Error(\"not implemented\");\n    }\n    else if (eventName && typeof (eventName) === \"object\") {\n        return \"filter:\" + (eventName.address || \"*\") + \":\" + serializeTopics(eventName.topics || []);\n    }\n    throw new Error(\"invalid event - \" + eventName);\n}\n//////////////////////////////\n// Helper Object\nfunction getTime() {\n    return (new Date()).getTime();\n}\nfunction stall(duration) {\n    return new Promise((resolve) => {\n        setTimeout(resolve, duration);\n    });\n}\n//////////////////////////////\n// Provider Object\n/**\n *  EventType\n *   - \"block\"\n *   - \"poll\"\n *   - \"didPoll\"\n *   - \"pending\"\n *   - \"error\"\n *   - \"network\"\n *   - filter\n *   - topics array\n *   - transaction hash\n */\nconst PollableEvents = [\"block\", \"network\", \"pending\", \"poll\"];\nexport class Event {\n    constructor(tag, listener, once) {\n        defineReadOnly(this, \"tag\", tag);\n        defineReadOnly(this, \"listener\", listener);\n        defineReadOnly(this, \"once\", once);\n        this._lastBlockNumber = -2;\n        this._inflight = false;\n    }\n    get event() {\n        switch (this.type) {\n            case \"tx\":\n                return this.hash;\n            case \"filter\":\n                return this.filter;\n        }\n        return this.tag;\n    }\n    get type() {\n        return this.tag.split(\":\")[0];\n    }\n    get hash() {\n        const comps = this.tag.split(\":\");\n        if (comps[0] !== \"tx\") {\n            return null;\n        }\n        return comps[1];\n    }\n    get filter() {\n        const comps = this.tag.split(\":\");\n        if (comps[0] !== \"filter\") {\n            return null;\n        }\n        const address = comps[1];\n        const topics = deserializeTopics(comps[2]);\n        const filter = {};\n        if (topics.length > 0) {\n            filter.topics = topics;\n        }\n        if (address && address !== \"*\") {\n            filter.address = address;\n        }\n        return filter;\n    }\n    pollable() {\n        return (this.tag.indexOf(\":\") >= 0 || PollableEvents.indexOf(this.tag) >= 0);\n    }\n}\n;\n// https://github.com/satoshilabs/slips/blob/master/slip-0044.md\nconst coinInfos = {\n    \"0\": { symbol: \"btc\", p2pkh: 0x00, p2sh: 0x05, prefix: \"bc\" },\n    \"2\": { symbol: \"ltc\", p2pkh: 0x30, p2sh: 0x32, prefix: \"ltc\" },\n    \"3\": { symbol: \"doge\", p2pkh: 0x1e, p2sh: 0x16 },\n    \"60\": { symbol: \"eth\", ilk: \"eth\" },\n    \"61\": { symbol: \"etc\", ilk: \"eth\" },\n    \"700\": { symbol: \"xdai\", ilk: \"eth\" },\n};\nfunction bytes32ify(value) {\n    return hexZeroPad(BigNumber.from(value).toHexString(), 32);\n}\n// Compute the Base58Check encoded data (checksum is first 4 bytes of sha256d)\nfunction base58Encode(data) {\n    return Base58.encode(concat([data, hexDataSlice(sha256(sha256(data)), 0, 4)]));\n}\nconst matcherIpfs = new RegExp(\"^(ipfs):/\\/(.*)$\", \"i\");\nconst matchers = [\n    new RegExp(\"^(https):/\\/(.*)$\", \"i\"),\n    new RegExp(\"^(data):(.*)$\", \"i\"),\n    matcherIpfs,\n    new RegExp(\"^eip155:[0-9]+/(erc[0-9]+):(.*)$\", \"i\"),\n];\nfunction _parseString(result, start) {\n    try {\n        return toUtf8String(_parseBytes(result, start));\n    }\n    catch (error) { }\n    return null;\n}\nfunction _parseBytes(result, start) {\n    if (result === \"0x\") {\n        return null;\n    }\n    const offset = BigNumber.from(hexDataSlice(result, start, start + 32)).toNumber();\n    const length = BigNumber.from(hexDataSlice(result, offset, offset + 32)).toNumber();\n    return hexDataSlice(result, offset + 32, offset + 32 + length);\n}\n// Trim off the ipfs:// prefix and return the default gateway URL\nfunction getIpfsLink(link) {\n    if (link.match(/^ipfs:\\/\\/ipfs\\//i)) {\n        link = link.substring(12);\n    }\n    else if (link.match(/^ipfs:\\/\\//i)) {\n        link = link.substring(7);\n    }\n    else {\n        logger.throwArgumentError(\"unsupported IPFS format\", \"link\", link);\n    }\n    return `https:/\\/gateway.ipfs.io/ipfs/${link}`;\n}\nfunction numPad(value) {\n    const result = arrayify(value);\n    if (result.length > 32) {\n        throw new Error(\"internal; should not happen\");\n    }\n    const padded = new Uint8Array(32);\n    padded.set(result, 32 - result.length);\n    return padded;\n}\nfunction bytesPad(value) {\n    if ((value.length % 32) === 0) {\n        return value;\n    }\n    const result = new Uint8Array(Math.ceil(value.length / 32) * 32);\n    result.set(value);\n    return result;\n}\n// ABI Encodes a series of (bytes, bytes, ...)\nfunction encodeBytes(datas) {\n    const result = [];\n    let byteCount = 0;\n    // Add place-holders for pointers as we add items\n    for (let i = 0; i < datas.length; i++) {\n        result.push(null);\n        byteCount += 32;\n    }\n    for (let i = 0; i < datas.length; i++) {\n        const data = arrayify(datas[i]);\n        // Update the bytes offset\n        result[i] = numPad(byteCount);\n        // The length and padded value of data\n        result.push(numPad(data.length));\n        result.push(bytesPad(data));\n        byteCount += 32 + Math.ceil(data.length / 32) * 32;\n    }\n    return hexConcat(result);\n}\nexport class Resolver {\n    // The resolvedAddress is only for creating a ReverseLookup resolver\n    constructor(provider, address, name, resolvedAddress) {\n        defineReadOnly(this, \"provider\", provider);\n        defineReadOnly(this, \"name\", name);\n        defineReadOnly(this, \"address\", provider.formatter.address(address));\n        defineReadOnly(this, \"_resolvedAddress\", resolvedAddress);\n    }\n    supportsWildcard() {\n        if (!this._supportsEip2544) {\n            // supportsInterface(bytes4 = selector(\"resolve(bytes,bytes)\"))\n            this._supportsEip2544 = this.provider.call({\n                to: this.address,\n                data: \"0x01ffc9a79061b92300000000000000000000000000000000000000000000000000000000\"\n            }).then((result) => {\n                return BigNumber.from(result).eq(1);\n            }).catch((error) => {\n                if (error.code === Logger.errors.CALL_EXCEPTION) {\n                    return false;\n                }\n                // Rethrow the error: link is down, etc. Let future attempts retry.\n                this._supportsEip2544 = null;\n                throw error;\n            });\n        }\n        return this._supportsEip2544;\n    }\n    _fetch(selector, parameters) {\n        return __awaiter(this, void 0, void 0, function* () {\n            // e.g. keccak256(\"addr(bytes32,uint256)\")\n            const tx = {\n                to: this.address,\n                ccipReadEnabled: true,\n                data: hexConcat([selector, namehash(this.name), (parameters || \"0x\")])\n            };\n            // Wildcard support; use EIP-2544 to resolve the request\n            let parseBytes = false;\n            if (yield this.supportsWildcard()) {\n                parseBytes = true;\n                // selector(\"resolve(bytes,bytes)\")\n                tx.data = hexConcat([\"0x9061b923\", encodeBytes([dnsEncode(this.name), tx.data])]);\n            }\n            try {\n                let result = yield this.provider.call(tx);\n                if ((arrayify(result).length % 32) === 4) {\n                    logger.throwError(\"resolver threw error\", Logger.errors.CALL_EXCEPTION, {\n                        transaction: tx, data: result\n                    });\n                }\n                if (parseBytes) {\n                    result = _parseBytes(result, 0);\n                }\n                return result;\n            }\n            catch (error) {\n                if (error.code === Logger.errors.CALL_EXCEPTION) {\n                    return null;\n                }\n                throw error;\n            }\n        });\n    }\n    _fetchBytes(selector, parameters) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const result = yield this._fetch(selector, parameters);\n            if (result != null) {\n                return _parseBytes(result, 0);\n            }\n            return null;\n        });\n    }\n    _getAddress(coinType, hexBytes) {\n        const coinInfo = coinInfos[String(coinType)];\n        if (coinInfo == null) {\n            logger.throwError(`unsupported coin type: ${coinType}`, Logger.errors.UNSUPPORTED_OPERATION, {\n                operation: `getAddress(${coinType})`\n            });\n        }\n        if (coinInfo.ilk === \"eth\") {\n            return this.provider.formatter.address(hexBytes);\n        }\n        const bytes = arrayify(hexBytes);\n        // P2PKH: OP_DUP OP_HASH160 <pubKeyHash> OP_EQUALVERIFY OP_CHECKSIG\n        if (coinInfo.p2pkh != null) {\n            const p2pkh = hexBytes.match(/^0x76a9([0-9a-f][0-9a-f])([0-9a-f]*)88ac$/);\n            if (p2pkh) {\n                const length = parseInt(p2pkh[1], 16);\n                if (p2pkh[2].length === length * 2 && length >= 1 && length <= 75) {\n                    return base58Encode(concat([[coinInfo.p2pkh], (\"0x\" + p2pkh[2])]));\n                }\n            }\n        }\n        // P2SH: OP_HASH160 <scriptHash> OP_EQUAL\n        if (coinInfo.p2sh != null) {\n            const p2sh = hexBytes.match(/^0xa9([0-9a-f][0-9a-f])([0-9a-f]*)87$/);\n            if (p2sh) {\n                const length = parseInt(p2sh[1], 16);\n                if (p2sh[2].length === length * 2 && length >= 1 && length <= 75) {\n                    return base58Encode(concat([[coinInfo.p2sh], (\"0x\" + p2sh[2])]));\n                }\n            }\n        }\n        // Bech32\n        if (coinInfo.prefix != null) {\n            const length = bytes[1];\n            // https://github.com/bitcoin/bips/blob/master/bip-0141.mediawiki#witness-program\n            let version = bytes[0];\n            if (version === 0x00) {\n                if (length !== 20 && length !== 32) {\n                    version = -1;\n                }\n            }\n            else {\n                version = -1;\n            }\n            if (version >= 0 && bytes.length === 2 + length && length >= 1 && length <= 75) {\n                const words = bech32.toWords(bytes.slice(2));\n                words.unshift(version);\n                return bech32.encode(coinInfo.prefix, words);\n            }\n        }\n        return null;\n    }\n    getAddress(coinType) {\n        return __awaiter(this, void 0, void 0, function* () {\n            if (coinType == null) {\n                coinType = 60;\n            }\n            // If Ethereum, use the standard `addr(bytes32)`\n            if (coinType === 60) {\n                try {\n                    // keccak256(\"addr(bytes32)\")\n                    const result = yield this._fetch(\"0x3b3b57de\");\n                    // No address\n                    if (result === \"0x\" || result === HashZero) {\n                        return null;\n                    }\n                    return this.provider.formatter.callAddress(result);\n                }\n                catch (error) {\n                    if (error.code === Logger.errors.CALL_EXCEPTION) {\n                        return null;\n                    }\n                    throw error;\n                }\n            }\n            // keccak256(\"addr(bytes32,uint256\")\n            const hexBytes = yield this._fetchBytes(\"0xf1cb7e06\", bytes32ify(coinType));\n            // No address\n            if (hexBytes == null || hexBytes === \"0x\") {\n                return null;\n            }\n            // Compute the address\n            const address = this._getAddress(coinType, hexBytes);\n            if (address == null) {\n                logger.throwError(`invalid or unsupported coin data`, Logger.errors.UNSUPPORTED_OPERATION, {\n                    operation: `getAddress(${coinType})`,\n                    coinType: coinType,\n                    data: hexBytes\n                });\n            }\n            return address;\n        });\n    }\n    getAvatar() {\n        return __awaiter(this, void 0, void 0, function* () {\n            const linkage = [{ type: \"name\", content: this.name }];\n            try {\n                // test data for ricmoo.eth\n                //const avatar = \"eip155:1/erc721:0x265385c7f4132228A0d54EB1A9e7460b91c0cC68/29233\";\n                const avatar = yield this.getText(\"avatar\");\n                if (avatar == null) {\n                    return null;\n                }\n                for (let i = 0; i < matchers.length; i++) {\n                    const match = avatar.match(matchers[i]);\n                    if (match == null) {\n                        continue;\n                    }\n                    const scheme = match[1].toLowerCase();\n                    switch (scheme) {\n                        case \"https\":\n                            linkage.push({ type: \"url\", content: avatar });\n                            return { linkage, url: avatar };\n                        case \"data\":\n                            linkage.push({ type: \"data\", content: avatar });\n                            return { linkage, url: avatar };\n                        case \"ipfs\":\n                            linkage.push({ type: \"ipfs\", content: avatar });\n                            return { linkage, url: getIpfsLink(avatar) };\n                        case \"erc721\":\n                        case \"erc1155\": {\n                            // Depending on the ERC type, use tokenURI(uint256) or url(uint256)\n                            const selector = (scheme === \"erc721\") ? \"0xc87b56dd\" : \"0x0e89341c\";\n                            linkage.push({ type: scheme, content: avatar });\n                            // The owner of this name\n                            const owner = (this._resolvedAddress || (yield this.getAddress()));\n                            const comps = (match[2] || \"\").split(\"/\");\n                            if (comps.length !== 2) {\n                                return null;\n                            }\n                            const addr = yield this.provider.formatter.address(comps[0]);\n                            const tokenId = hexZeroPad(BigNumber.from(comps[1]).toHexString(), 32);\n                            // Check that this account owns the token\n                            if (scheme === \"erc721\") {\n                                // ownerOf(uint256 tokenId)\n                                const tokenOwner = this.provider.formatter.callAddress(yield this.provider.call({\n                                    to: addr, data: hexConcat([\"0x6352211e\", tokenId])\n                                }));\n                                if (owner !== tokenOwner) {\n                                    return null;\n                                }\n                                linkage.push({ type: \"owner\", content: tokenOwner });\n                            }\n                            else if (scheme === \"erc1155\") {\n                                // balanceOf(address owner, uint256 tokenId)\n                                const balance = BigNumber.from(yield this.provider.call({\n                                    to: addr, data: hexConcat([\"0x00fdd58e\", hexZeroPad(owner, 32), tokenId])\n                                }));\n                                if (balance.isZero()) {\n                                    return null;\n                                }\n                                linkage.push({ type: \"balance\", content: balance.toString() });\n                            }\n                            // Call the token contract for the metadata URL\n                            const tx = {\n                                to: this.provider.formatter.address(comps[0]),\n                                data: hexConcat([selector, tokenId])\n                            };\n                            let metadataUrl = _parseString(yield this.provider.call(tx), 0);\n                            if (metadataUrl == null) {\n                                return null;\n                            }\n                            linkage.push({ type: \"metadata-url-base\", content: metadataUrl });\n                            // ERC-1155 allows a generic {id} in the URL\n                            if (scheme === \"erc1155\") {\n                                metadataUrl = metadataUrl.replace(\"{id}\", tokenId.substring(2));\n                                linkage.push({ type: \"metadata-url-expanded\", content: metadataUrl });\n                            }\n                            // Transform IPFS metadata links\n                            if (metadataUrl.match(/^ipfs:/i)) {\n                                metadataUrl = getIpfsLink(metadataUrl);\n                            }\n                            linkage.push({ type: \"metadata-url\", content: metadataUrl });\n                            // Get the token metadata\n                            const metadata = yield fetchJson(metadataUrl);\n                            if (!metadata) {\n                                return null;\n                            }\n                            linkage.push({ type: \"metadata\", content: JSON.stringify(metadata) });\n                            // Pull the image URL out\n                            let imageUrl = metadata.image;\n                            if (typeof (imageUrl) !== \"string\") {\n                                return null;\n                            }\n                            if (imageUrl.match(/^(https:\\/\\/|data:)/i)) {\n                                // Allow\n                            }\n                            else {\n                                // Transform IPFS link to gateway\n                                const ipfs = imageUrl.match(matcherIpfs);\n                                if (ipfs == null) {\n                                    return null;\n                                }\n                                linkage.push({ type: \"url-ipfs\", content: imageUrl });\n                                imageUrl = getIpfsLink(imageUrl);\n                            }\n                            linkage.push({ type: \"url\", content: imageUrl });\n                            return { linkage, url: imageUrl };\n                        }\n                    }\n                }\n            }\n            catch (error) { }\n            return null;\n        });\n    }\n    getContentHash() {\n        return __awaiter(this, void 0, void 0, function* () {\n            // keccak256(\"contenthash()\")\n            const hexBytes = yield this._fetchBytes(\"0xbc1c58d1\");\n            // No contenthash\n            if (hexBytes == null || hexBytes === \"0x\") {\n                return null;\n            }\n            // IPFS (CID: 1, Type: DAG-PB)\n            const ipfs = hexBytes.match(/^0xe3010170(([0-9a-f][0-9a-f])([0-9a-f][0-9a-f])([0-9a-f]*))$/);\n            if (ipfs) {\n                const length = parseInt(ipfs[3], 16);\n                if (ipfs[4].length === length * 2) {\n                    return \"ipfs:/\\/\" + Base58.encode(\"0x\" + ipfs[1]);\n                }\n            }\n            // IPNS (CID: 1, Type: libp2p-key)\n            const ipns = hexBytes.match(/^0xe5010172(([0-9a-f][0-9a-f])([0-9a-f][0-9a-f])([0-9a-f]*))$/);\n            if (ipns) {\n                const length = parseInt(ipns[3], 16);\n                if (ipns[4].length === length * 2) {\n                    return \"ipns:/\\/\" + Base58.encode(\"0x\" + ipns[1]);\n                }\n            }\n            // Swarm (CID: 1, Type: swarm-manifest; hash/length hard-coded to keccak256/32)\n            const swarm = hexBytes.match(/^0xe40101fa011b20([0-9a-f]*)$/);\n            if (swarm) {\n                if (swarm[1].length === (32 * 2)) {\n                    return \"bzz:/\\/\" + swarm[1];\n                }\n            }\n            const skynet = hexBytes.match(/^0x90b2c605([0-9a-f]*)$/);\n            if (skynet) {\n                if (skynet[1].length === (34 * 2)) {\n                    // URL Safe base64; https://datatracker.ietf.org/doc/html/rfc4648#section-5\n                    const urlSafe = { \"=\": \"\", \"+\": \"-\", \"/\": \"_\" };\n                    const hash = base64Encode(\"0x\" + skynet[1]).replace(/[=+\\/]/g, (a) => (urlSafe[a]));\n                    return \"sia:/\\/\" + hash;\n                }\n            }\n            return logger.throwError(`invalid or unsupported content hash data`, Logger.errors.UNSUPPORTED_OPERATION, {\n                operation: \"getContentHash()\",\n                data: hexBytes\n            });\n        });\n    }\n    getText(key) {\n        return __awaiter(this, void 0, void 0, function* () {\n            // The key encoded as parameter to fetchBytes\n            let keyBytes = toUtf8Bytes(key);\n            // The nodehash consumes the first slot, so the string pointer targets\n            // offset 64, with the length at offset 64 and data starting at offset 96\n            keyBytes = concat([bytes32ify(64), bytes32ify(keyBytes.length), keyBytes]);\n            // Pad to word-size (32 bytes)\n            if ((keyBytes.length % 32) !== 0) {\n                keyBytes = concat([keyBytes, hexZeroPad(\"0x\", 32 - (key.length % 32))]);\n            }\n            const hexBytes = yield this._fetchBytes(\"0x59d1d43c\", hexlify(keyBytes));\n            if (hexBytes == null || hexBytes === \"0x\") {\n                return null;\n            }\n            return toUtf8String(hexBytes);\n        });\n    }\n}\nlet defaultFormatter = null;\nlet nextPollId = 1;\nexport class BaseProvider extends Provider {\n    /**\n     *  ready\n     *\n     *  A Promise<Network> that resolves only once the provider is ready.\n     *\n     *  Sub-classes that call the super with a network without a chainId\n     *  MUST set this. Standard named networks have a known chainId.\n     *\n     */\n    constructor(network) {\n        super();\n        // Events being listened to\n        this._events = [];\n        this._emitted = { block: -2 };\n        this.disableCcipRead = false;\n        this.formatter = new.target.getFormatter();\n        // If network is any, this Provider allows the underlying\n        // network to change dynamically, and we auto-detect the\n        // current network\n        defineReadOnly(this, \"anyNetwork\", (network === \"any\"));\n        if (this.anyNetwork) {\n            network = this.detectNetwork();\n        }\n        if (network instanceof Promise) {\n            this._networkPromise = network;\n            // Squash any \"unhandled promise\" errors; that do not need to be handled\n            network.catch((error) => { });\n            // Trigger initial network setting (async)\n            this._ready().catch((error) => { });\n        }\n        else {\n            const knownNetwork = getStatic(new.target, \"getNetwork\")(network);\n            if (knownNetwork) {\n                defineReadOnly(this, \"_network\", knownNetwork);\n                this.emit(\"network\", knownNetwork, null);\n            }\n            else {\n                logger.throwArgumentError(\"invalid network\", \"network\", network);\n            }\n        }\n        this._maxInternalBlockNumber = -1024;\n        this._lastBlockNumber = -2;\n        this._maxFilterBlockRange = 10;\n        this._pollingInterval = 4000;\n        this._fastQueryDate = 0;\n    }\n    _ready() {\n        return __awaiter(this, void 0, void 0, function* () {\n            if (this._network == null) {\n                let network = null;\n                if (this._networkPromise) {\n                    try {\n                        network = yield this._networkPromise;\n                    }\n                    catch (error) { }\n                }\n                // Try the Provider's network detection (this MUST throw if it cannot)\n                if (network == null) {\n                    network = yield this.detectNetwork();\n                }\n                // This should never happen; every Provider sub-class should have\n                // suggested a network by here (or have thrown).\n                if (!network) {\n                    logger.throwError(\"no network detected\", Logger.errors.UNKNOWN_ERROR, {});\n                }\n                // Possible this call stacked so do not call defineReadOnly again\n                if (this._network == null) {\n                    if (this.anyNetwork) {\n                        this._network = network;\n                    }\n                    else {\n                        defineReadOnly(this, \"_network\", network);\n                    }\n                    this.emit(\"network\", network, null);\n                }\n            }\n            return this._network;\n        });\n    }\n    // This will always return the most recently established network.\n    // For \"any\", this can change (a \"network\" event is emitted before\n    // any change is reflected); otherwise this cannot change\n    get ready() {\n        return poll(() => {\n            return this._ready().then((network) => {\n                return network;\n            }, (error) => {\n                // If the network isn't running yet, we will wait\n                if (error.code === Logger.errors.NETWORK_ERROR && error.event === \"noNetwork\") {\n                    return undefined;\n                }\n                throw error;\n            });\n        });\n    }\n    // @TODO: Remove this and just create a singleton formatter\n    static getFormatter() {\n        if (defaultFormatter == null) {\n            defaultFormatter = new Formatter();\n        }\n        return defaultFormatter;\n    }\n    // @TODO: Remove this and just use getNetwork\n    static getNetwork(network) {\n        return getNetwork((network == null) ? \"homestead\" : network);\n    }\n    ccipReadFetch(tx, calldata, urls) {\n        return __awaiter(this, void 0, void 0, function* () {\n            if (this.disableCcipRead || urls.length === 0) {\n                return null;\n            }\n            const sender = tx.to.toLowerCase();\n            const data = calldata.toLowerCase();\n            const errorMessages = [];\n            for (let i = 0; i < urls.length; i++) {\n                const url = urls[i];\n                // URL expansion\n                const href = url.replace(\"{sender}\", sender).replace(\"{data}\", data);\n                // If no {data} is present, use POST; otherwise GET\n                const json = (url.indexOf(\"{data}\") >= 0) ? null : JSON.stringify({ data, sender });\n                const result = yield fetchJson({ url: href, errorPassThrough: true }, json, (value, response) => {\n                    value.status = response.statusCode;\n                    return value;\n                });\n                if (result.data) {\n                    return result.data;\n                }\n                const errorMessage = (result.message || \"unknown error\");\n                // 4xx indicates the result is not present; stop\n                if (result.status >= 400 && result.status < 500) {\n                    return logger.throwError(`response not found during CCIP fetch: ${errorMessage}`, Logger.errors.SERVER_ERROR, { url, errorMessage });\n                }\n                // 5xx indicates server issue; try the next url\n                errorMessages.push(errorMessage);\n            }\n            return logger.throwError(`error encountered during CCIP fetch: ${errorMessages.map((m) => JSON.stringify(m)).join(\", \")}`, Logger.errors.SERVER_ERROR, {\n                urls, errorMessages\n            });\n        });\n    }\n    // Fetches the blockNumber, but will reuse any result that is less\n    // than maxAge old or has been requested since the last request\n    _getInternalBlockNumber(maxAge) {\n        return __awaiter(this, void 0, void 0, function* () {\n            yield this._ready();\n            // Allowing stale data up to maxAge old\n            if (maxAge > 0) {\n                // While there are pending internal block requests...\n                while (this._internalBlockNumber) {\n                    // ...\"remember\" which fetch we started with\n                    const internalBlockNumber = this._internalBlockNumber;\n                    try {\n                        // Check the result is not too stale\n                        const result = yield internalBlockNumber;\n                        if ((getTime() - result.respTime) <= maxAge) {\n                            return result.blockNumber;\n                        }\n                        // Too old; fetch a new value\n                        break;\n                    }\n                    catch (error) {\n                        // The fetch rejected; if we are the first to get the\n                        // rejection, drop through so we replace it with a new\n                        // fetch; all others blocked will then get that fetch\n                        // which won't match the one they \"remembered\" and loop\n                        if (this._internalBlockNumber === internalBlockNumber) {\n                            break;\n                        }\n                    }\n                }\n            }\n            const reqTime = getTime();\n            const checkInternalBlockNumber = resolveProperties({\n                blockNumber: this.perform(\"getBlockNumber\", {}),\n                networkError: this.getNetwork().then((network) => (null), (error) => (error))\n            }).then(({ blockNumber, networkError }) => {\n                if (networkError) {\n                    // Unremember this bad internal block number\n                    if (this._internalBlockNumber === checkInternalBlockNumber) {\n                        this._internalBlockNumber = null;\n                    }\n                    throw networkError;\n                }\n                const respTime = getTime();\n                blockNumber = BigNumber.from(blockNumber).toNumber();\n                if (blockNumber < this._maxInternalBlockNumber) {\n                    blockNumber = this._maxInternalBlockNumber;\n                }\n                this._maxInternalBlockNumber = blockNumber;\n                this._setFastBlockNumber(blockNumber); // @TODO: Still need this?\n                return { blockNumber, reqTime, respTime };\n            });\n            this._internalBlockNumber = checkInternalBlockNumber;\n            // Swallow unhandled exceptions; if needed they are handled else where\n            checkInternalBlockNumber.catch((error) => {\n                // Don't null the dead (rejected) fetch, if it has already been updated\n                if (this._internalBlockNumber === checkInternalBlockNumber) {\n                    this._internalBlockNumber = null;\n                }\n            });\n            return (yield checkInternalBlockNumber).blockNumber;\n        });\n    }\n    poll() {\n        return __awaiter(this, void 0, void 0, function* () {\n            const pollId = nextPollId++;\n            // Track all running promises, so we can trigger a post-poll once they are complete\n            const runners = [];\n            let blockNumber = null;\n            try {\n                blockNumber = yield this._getInternalBlockNumber(100 + this.pollingInterval / 2);\n            }\n            catch (error) {\n                this.emit(\"error\", error);\n                return;\n            }\n            this._setFastBlockNumber(blockNumber);\n            // Emit a poll event after we have the latest (fast) block number\n            this.emit(\"poll\", pollId, blockNumber);\n            // If the block has not changed, meh.\n            if (blockNumber === this._lastBlockNumber) {\n                this.emit(\"didPoll\", pollId);\n                return;\n            }\n            // First polling cycle, trigger a \"block\" events\n            if (this._emitted.block === -2) {\n                this._emitted.block = blockNumber - 1;\n            }\n            if (Math.abs((this._emitted.block) - blockNumber) > 1000) {\n                logger.warn(`network block skew detected; skipping block events (emitted=${this._emitted.block} blockNumber${blockNumber})`);\n                this.emit(\"error\", logger.makeError(\"network block skew detected\", Logger.errors.NETWORK_ERROR, {\n                    blockNumber: blockNumber,\n                    event: \"blockSkew\",\n                    previousBlockNumber: this._emitted.block\n                }));\n                this.emit(\"block\", blockNumber);\n            }\n            else {\n                // Notify all listener for each block that has passed\n                for (let i = this._emitted.block + 1; i <= blockNumber; i++) {\n                    this.emit(\"block\", i);\n                }\n            }\n            // The emitted block was updated, check for obsolete events\n            if (this._emitted.block !== blockNumber) {\n                this._emitted.block = blockNumber;\n                Object.keys(this._emitted).forEach((key) => {\n                    // The block event does not expire\n                    if (key === \"block\") {\n                        return;\n                    }\n                    // The block we were at when we emitted this event\n                    const eventBlockNumber = this._emitted[key];\n                    // We cannot garbage collect pending transactions or blocks here\n                    // They should be garbage collected by the Provider when setting\n                    // \"pending\" events\n                    if (eventBlockNumber === \"pending\") {\n                        return;\n                    }\n                    // Evict any transaction hashes or block hashes over 12 blocks\n                    // old, since they should not return null anyways\n                    if (blockNumber - eventBlockNumber > 12) {\n                        delete this._emitted[key];\n                    }\n                });\n            }\n            // First polling cycle\n            if (this._lastBlockNumber === -2) {\n                this._lastBlockNumber = blockNumber - 1;\n            }\n            // Find all transaction hashes we are waiting on\n            this._events.forEach((event) => {\n                switch (event.type) {\n                    case \"tx\": {\n                        const hash = event.hash;\n                        let runner = this.getTransactionReceipt(hash).then((receipt) => {\n                            if (!receipt || receipt.blockNumber == null) {\n                                return null;\n                            }\n                            this._emitted[\"t:\" + hash] = receipt.blockNumber;\n                            this.emit(hash, receipt);\n                            return null;\n                        }).catch((error) => { this.emit(\"error\", error); });\n                        runners.push(runner);\n                        break;\n                    }\n                    case \"filter\": {\n                        // We only allow a single getLogs to be in-flight at a time\n                        if (!event._inflight) {\n                            event._inflight = true;\n                            // Filter from the last known event; due to load-balancing\n                            // and some nodes returning updated block numbers before\n                            // indexing events, a logs result with 0 entries cannot be\n                            // trusted and we must retry a range which includes it again\n                            const filter = event.filter;\n                            filter.fromBlock = event._lastBlockNumber + 1;\n                            filter.toBlock = blockNumber;\n                            // Prevent fitler ranges from growing too wild\n                            if (filter.toBlock - this._maxFilterBlockRange > filter.fromBlock) {\n                                filter.fromBlock = filter.toBlock - this._maxFilterBlockRange;\n                            }\n                            const runner = this.getLogs(filter).then((logs) => {\n                                // Allow the next getLogs\n                                event._inflight = false;\n                                if (logs.length === 0) {\n                                    return;\n                                }\n                                logs.forEach((log) => {\n                                    // Only when we get an event for a given block number\n                                    // can we trust the events are indexed\n                                    if (log.blockNumber > event._lastBlockNumber) {\n                                        event._lastBlockNumber = log.blockNumber;\n                                    }\n                                    // Make sure we stall requests to fetch blocks and txs\n                                    this._emitted[\"b:\" + log.blockHash] = log.blockNumber;\n                                    this._emitted[\"t:\" + log.transactionHash] = log.blockNumber;\n                                    this.emit(filter, log);\n                                });\n                            }).catch((error) => {\n                                this.emit(\"error\", error);\n                                // Allow another getLogs (the range was not updated)\n                                event._inflight = false;\n                            });\n                            runners.push(runner);\n                        }\n                        break;\n                    }\n                }\n            });\n            this._lastBlockNumber = blockNumber;\n            // Once all events for this loop have been processed, emit \"didPoll\"\n            Promise.all(runners).then(() => {\n                this.emit(\"didPoll\", pollId);\n            }).catch((error) => { this.emit(\"error\", error); });\n            return;\n        });\n    }\n    // Deprecated; do not use this\n    resetEventsBlock(blockNumber) {\n        this._lastBlockNumber = blockNumber - 1;\n        if (this.polling) {\n            this.poll();\n        }\n    }\n    get network() {\n        return this._network;\n    }\n    // This method should query the network if the underlying network\n    // can change, such as when connected to a JSON-RPC backend\n    detectNetwork() {\n        return __awaiter(this, void 0, void 0, function* () {\n            return logger.throwError(\"provider does not support network detection\", Logger.errors.UNSUPPORTED_OPERATION, {\n                operation: \"provider.detectNetwork\"\n            });\n        });\n    }\n    getNetwork() {\n        return __awaiter(this, void 0, void 0, function* () {\n            const network = yield this._ready();\n            // Make sure we are still connected to the same network; this is\n            // only an external call for backends which can have the underlying\n            // network change spontaneously\n            const currentNetwork = yield this.detectNetwork();\n            if (network.chainId !== currentNetwork.chainId) {\n                // We are allowing network changes, things can get complex fast;\n                // make sure you know what you are doing if you use \"any\"\n                if (this.anyNetwork) {\n                    this._network = currentNetwork;\n                    // Reset all internal block number guards and caches\n                    this._lastBlockNumber = -2;\n                    this._fastBlockNumber = null;\n                    this._fastBlockNumberPromise = null;\n                    this._fastQueryDate = 0;\n                    this._emitted.block = -2;\n                    this._maxInternalBlockNumber = -1024;\n                    this._internalBlockNumber = null;\n                    // The \"network\" event MUST happen before this method resolves\n                    // so any events have a chance to unregister, so we stall an\n                    // additional event loop before returning from /this/ call\n                    this.emit(\"network\", currentNetwork, network);\n                    yield stall(0);\n                    return this._network;\n                }\n                const error = logger.makeError(\"underlying network changed\", Logger.errors.NETWORK_ERROR, {\n                    event: \"changed\",\n                    network: network,\n                    detectedNetwork: currentNetwork\n                });\n                this.emit(\"error\", error);\n                throw error;\n            }\n            return network;\n        });\n    }\n    get blockNumber() {\n        this._getInternalBlockNumber(100 + this.pollingInterval / 2).then((blockNumber) => {\n            this._setFastBlockNumber(blockNumber);\n        }, (error) => { });\n        return (this._fastBlockNumber != null) ? this._fastBlockNumber : -1;\n    }\n    get polling() {\n        return (this._poller != null);\n    }\n    set polling(value) {\n        if (value && !this._poller) {\n            this._poller = setInterval(() => { this.poll(); }, this.pollingInterval);\n            if (!this._bootstrapPoll) {\n                this._bootstrapPoll = setTimeout(() => {\n                    this.poll();\n                    // We block additional polls until the polling interval\n                    // is done, to prevent overwhelming the poll function\n                    this._bootstrapPoll = setTimeout(() => {\n                        // If polling was disabled, something may require a poke\n                        // since starting the bootstrap poll and it was disabled\n                        if (!this._poller) {\n                            this.poll();\n                        }\n                        // Clear out the bootstrap so we can do another\n                        this._bootstrapPoll = null;\n                    }, this.pollingInterval);\n                }, 0);\n            }\n        }\n        else if (!value && this._poller) {\n            clearInterval(this._poller);\n            this._poller = null;\n        }\n    }\n    get pollingInterval() {\n        return this._pollingInterval;\n    }\n    set pollingInterval(value) {\n        if (typeof (value) !== \"number\" || value <= 0 || parseInt(String(value)) != value) {\n            throw new Error(\"invalid polling interval\");\n        }\n        this._pollingInterval = value;\n        if (this._poller) {\n            clearInterval(this._poller);\n            this._poller = setInterval(() => { this.poll(); }, this._pollingInterval);\n        }\n    }\n    _getFastBlockNumber() {\n        const now = getTime();\n        // Stale block number, request a newer value\n        if ((now - this._fastQueryDate) > 2 * this._pollingInterval) {\n            this._fastQueryDate = now;\n            this._fastBlockNumberPromise = this.getBlockNumber().then((blockNumber) => {\n                if (this._fastBlockNumber == null || blockNumber > this._fastBlockNumber) {\n                    this._fastBlockNumber = blockNumber;\n                }\n                return this._fastBlockNumber;\n            });\n        }\n        return this._fastBlockNumberPromise;\n    }\n    _setFastBlockNumber(blockNumber) {\n        // Older block, maybe a stale request\n        if (this._fastBlockNumber != null && blockNumber < this._fastBlockNumber) {\n            return;\n        }\n        // Update the time we updated the blocknumber\n        this._fastQueryDate = getTime();\n        // Newer block number, use  it\n        if (this._fastBlockNumber == null || blockNumber > this._fastBlockNumber) {\n            this._fastBlockNumber = blockNumber;\n            this._fastBlockNumberPromise = Promise.resolve(blockNumber);\n        }\n    }\n    waitForTransaction(transactionHash, confirmations, timeout) {\n        return __awaiter(this, void 0, void 0, function* () {\n            return this._waitForTransaction(transactionHash, (confirmations == null) ? 1 : confirmations, timeout || 0, null);\n        });\n    }\n    _waitForTransaction(transactionHash, confirmations, timeout, replaceable) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const receipt = yield this.getTransactionReceipt(transactionHash);\n            // Receipt is already good\n            if ((receipt ? receipt.confirmations : 0) >= confirmations) {\n                return receipt;\n            }\n            // Poll until the receipt is good...\n            return new Promise((resolve, reject) => {\n                const cancelFuncs = [];\n                let done = false;\n                const alreadyDone = function () {\n                    if (done) {\n                        return true;\n                    }\n                    done = true;\n                    cancelFuncs.forEach((func) => { func(); });\n                    return false;\n                };\n                const minedHandler = (receipt) => {\n                    if (receipt.confirmations < confirmations) {\n                        return;\n                    }\n                    if (alreadyDone()) {\n                        return;\n                    }\n                    resolve(receipt);\n                };\n                this.on(transactionHash, minedHandler);\n                cancelFuncs.push(() => { this.removeListener(transactionHash, minedHandler); });\n                if (replaceable) {\n                    let lastBlockNumber = replaceable.startBlock;\n                    let scannedBlock = null;\n                    const replaceHandler = (blockNumber) => __awaiter(this, void 0, void 0, function* () {\n                        if (done) {\n                            return;\n                        }\n                        // Wait 1 second; this is only used in the case of a fault, so\n                        // we will trade off a little bit of latency for more consistent\n                        // results and fewer JSON-RPC calls\n                        yield stall(1000);\n                        this.getTransactionCount(replaceable.from).then((nonce) => __awaiter(this, void 0, void 0, function* () {\n                            if (done) {\n                                return;\n                            }\n                            if (nonce <= replaceable.nonce) {\n                                lastBlockNumber = blockNumber;\n                            }\n                            else {\n                                // First check if the transaction was mined\n                                {\n                                    const mined = yield this.getTransaction(transactionHash);\n                                    if (mined && mined.blockNumber != null) {\n                                        return;\n                                    }\n                                }\n                                // First time scanning. We start a little earlier for some\n                                // wiggle room here to handle the eventually consistent nature\n                                // of blockchain (e.g. the getTransactionCount was for a\n                                // different block)\n                                if (scannedBlock == null) {\n                                    scannedBlock = lastBlockNumber - 3;\n                                    if (scannedBlock < replaceable.startBlock) {\n                                        scannedBlock = replaceable.startBlock;\n                                    }\n                                }\n                                while (scannedBlock <= blockNumber) {\n                                    if (done) {\n                                        return;\n                                    }\n                                    const block = yield this.getBlockWithTransactions(scannedBlock);\n                                    for (let ti = 0; ti < block.transactions.length; ti++) {\n                                        const tx = block.transactions[ti];\n                                        // Successfully mined!\n                                        if (tx.hash === transactionHash) {\n                                            return;\n                                        }\n                                        // Matches our transaction from and nonce; its a replacement\n                                        if (tx.from === replaceable.from && tx.nonce === replaceable.nonce) {\n                                            if (done) {\n                                                return;\n                                            }\n                                            // Get the receipt of the replacement\n                                            const receipt = yield this.waitForTransaction(tx.hash, confirmations);\n                                            // Already resolved or rejected (prolly a timeout)\n                                            if (alreadyDone()) {\n                                                return;\n                                            }\n                                            // The reason we were replaced\n                                            let reason = \"replaced\";\n                                            if (tx.data === replaceable.data && tx.to === replaceable.to && tx.value.eq(replaceable.value)) {\n                                                reason = \"repriced\";\n                                            }\n                                            else if (tx.data === \"0x\" && tx.from === tx.to && tx.value.isZero()) {\n                                                reason = \"cancelled\";\n                                            }\n                                            // Explain why we were replaced\n                                            reject(logger.makeError(\"transaction was replaced\", Logger.errors.TRANSACTION_REPLACED, {\n                                                cancelled: (reason === \"replaced\" || reason === \"cancelled\"),\n                                                reason,\n                                                replacement: this._wrapTransaction(tx),\n                                                hash: transactionHash,\n                                                receipt\n                                            }));\n                                            return;\n                                        }\n                                    }\n                                    scannedBlock++;\n                                }\n                            }\n                            if (done) {\n                                return;\n                            }\n                            this.once(\"block\", replaceHandler);\n                        }), (error) => {\n                            if (done) {\n                                return;\n                            }\n                            this.once(\"block\", replaceHandler);\n                        });\n                    });\n                    if (done) {\n                        return;\n                    }\n                    this.once(\"block\", replaceHandler);\n                    cancelFuncs.push(() => {\n                        this.removeListener(\"block\", replaceHandler);\n                    });\n                }\n                if (typeof (timeout) === \"number\" && timeout > 0) {\n                    const timer = setTimeout(() => {\n                        if (alreadyDone()) {\n                            return;\n                        }\n                        reject(logger.makeError(\"timeout exceeded\", Logger.errors.TIMEOUT, { timeout: timeout }));\n                    }, timeout);\n                    if (timer.unref) {\n                        timer.unref();\n                    }\n                    cancelFuncs.push(() => { clearTimeout(timer); });\n                }\n            });\n        });\n    }\n    getBlockNumber() {\n        return __awaiter(this, void 0, void 0, function* () {\n            return this._getInternalBlockNumber(0);\n        });\n    }\n    getGasPrice() {\n        return __awaiter(this, void 0, void 0, function* () {\n            yield this.getNetwork();\n            const result = yield this.perform(\"getGasPrice\", {});\n            try {\n                return BigNumber.from(result);\n            }\n            catch (error) {\n                return logger.throwError(\"bad result from backend\", Logger.errors.SERVER_ERROR, {\n                    method: \"getGasPrice\",\n                    result, error\n                });\n            }\n        });\n    }\n    getBalance(addressOrName, blockTag) {\n        return __awaiter(this, void 0, void 0, function* () {\n            yield this.getNetwork();\n            const params = yield resolveProperties({\n                address: this._getAddress(addressOrName),\n                blockTag: this._getBlockTag(blockTag)\n            });\n            const result = yield this.perform(\"getBalance\", params);\n            try {\n                return BigNumber.from(result);\n            }\n            catch (error) {\n                return logger.throwError(\"bad result from backend\", Logger.errors.SERVER_ERROR, {\n                    method: \"getBalance\",\n                    params, result, error\n                });\n            }\n        });\n    }\n    getTransactionCount(addressOrName, blockTag) {\n        return __awaiter(this, void 0, void 0, function* () {\n            yield this.getNetwork();\n            const params = yield resolveProperties({\n                address: this._getAddress(addressOrName),\n                blockTag: this._getBlockTag(blockTag)\n            });\n            const result = yield this.perform(\"getTransactionCount\", params);\n            try {\n                return BigNumber.from(result).toNumber();\n            }\n            catch (error) {\n                return logger.throwError(\"bad result from backend\", Logger.errors.SERVER_ERROR, {\n                    method: \"getTransactionCount\",\n                    params, result, error\n                });\n            }\n        });\n    }\n    getCode(addressOrName, blockTag) {\n        return __awaiter(this, void 0, void 0, function* () {\n            yield this.getNetwork();\n            const params = yield resolveProperties({\n                address: this._getAddress(addressOrName),\n                blockTag: this._getBlockTag(blockTag)\n            });\n            const result = yield this.perform(\"getCode\", params);\n            try {\n                return hexlify(result);\n            }\n            catch (error) {\n                return logger.throwError(\"bad result from backend\", Logger.errors.SERVER_ERROR, {\n                    method: \"getCode\",\n                    params, result, error\n                });\n            }\n        });\n    }\n    getStorageAt(addressOrName, position, blockTag) {\n        return __awaiter(this, void 0, void 0, function* () {\n            yield this.getNetwork();\n            const params = yield resolveProperties({\n                address: this._getAddress(addressOrName),\n                blockTag: this._getBlockTag(blockTag),\n                position: Promise.resolve(position).then((p) => hexValue(p))\n            });\n            const result = yield this.perform(\"getStorageAt\", params);\n            try {\n                return hexlify(result);\n            }\n            catch (error) {\n                return logger.throwError(\"bad result from backend\", Logger.errors.SERVER_ERROR, {\n                    method: \"getStorageAt\",\n                    params, result, error\n                });\n            }\n        });\n    }\n    // This should be called by any subclass wrapping a TransactionResponse\n    _wrapTransaction(tx, hash, startBlock) {\n        if (hash != null && hexDataLength(hash) !== 32) {\n            throw new Error(\"invalid response - sendTransaction\");\n        }\n        const result = tx;\n        // Check the hash we expect is the same as the hash the server reported\n        if (hash != null && tx.hash !== hash) {\n            logger.throwError(\"Transaction hash mismatch from Provider.sendTransaction.\", Logger.errors.UNKNOWN_ERROR, { expectedHash: tx.hash, returnedHash: hash });\n        }\n        result.wait = (confirms, timeout) => __awaiter(this, void 0, void 0, function* () {\n            if (confirms == null) {\n                confirms = 1;\n            }\n            if (timeout == null) {\n                timeout = 0;\n            }\n            // Get the details to detect replacement\n            let replacement = undefined;\n            if (confirms !== 0 && startBlock != null) {\n                replacement = {\n                    data: tx.data,\n                    from: tx.from,\n                    nonce: tx.nonce,\n                    to: tx.to,\n                    value: tx.value,\n                    startBlock\n                };\n            }\n            const receipt = yield this._waitForTransaction(tx.hash, confirms, timeout, replacement);\n            if (receipt == null && confirms === 0) {\n                return null;\n            }\n            // No longer pending, allow the polling loop to garbage collect this\n            this._emitted[\"t:\" + tx.hash] = receipt.blockNumber;\n            if (receipt.status === 0) {\n                logger.throwError(\"transaction failed\", Logger.errors.CALL_EXCEPTION, {\n                    transactionHash: tx.hash,\n                    transaction: tx,\n                    receipt: receipt\n                });\n            }\n            return receipt;\n        });\n        return result;\n    }\n    sendTransaction(signedTransaction) {\n        return __awaiter(this, void 0, void 0, function* () {\n            yield this.getNetwork();\n            const hexTx = yield Promise.resolve(signedTransaction).then(t => hexlify(t));\n            const tx = this.formatter.transaction(signedTransaction);\n            if (tx.confirmations == null) {\n                tx.confirmations = 0;\n            }\n            const blockNumber = yield this._getInternalBlockNumber(100 + 2 * this.pollingInterval);\n            try {\n                const hash = yield this.perform(\"sendTransaction\", { signedTransaction: hexTx });\n                return this._wrapTransaction(tx, hash, blockNumber);\n            }\n            catch (error) {\n                error.transaction = tx;\n                error.transactionHash = tx.hash;\n                throw error;\n            }\n        });\n    }\n    _getTransactionRequest(transaction) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const values = yield transaction;\n            const tx = {};\n            [\"from\", \"to\"].forEach((key) => {\n                if (values[key] == null) {\n                    return;\n                }\n                tx[key] = Promise.resolve(values[key]).then((v) => (v ? this._getAddress(v) : null));\n            });\n            [\"gasLimit\", \"gasPrice\", \"maxFeePerGas\", \"maxPriorityFeePerGas\", \"value\"].forEach((key) => {\n                if (values[key] == null) {\n                    return;\n                }\n                tx[key] = Promise.resolve(values[key]).then((v) => (v ? BigNumber.from(v) : null));\n            });\n            [\"type\"].forEach((key) => {\n                if (values[key] == null) {\n                    return;\n                }\n                tx[key] = Promise.resolve(values[key]).then((v) => ((v != null) ? v : null));\n            });\n            if (values.accessList) {\n                tx.accessList = this.formatter.accessList(values.accessList);\n            }\n            [\"data\"].forEach((key) => {\n                if (values[key] == null) {\n                    return;\n                }\n                tx[key] = Promise.resolve(values[key]).then((v) => (v ? hexlify(v) : null));\n            });\n            return this.formatter.transactionRequest(yield resolveProperties(tx));\n        });\n    }\n    _getFilter(filter) {\n        return __awaiter(this, void 0, void 0, function* () {\n            filter = yield filter;\n            const result = {};\n            if (filter.address != null) {\n                result.address = this._getAddress(filter.address);\n            }\n            [\"blockHash\", \"topics\"].forEach((key) => {\n                if (filter[key] == null) {\n                    return;\n                }\n                result[key] = filter[key];\n            });\n            [\"fromBlock\", \"toBlock\"].forEach((key) => {\n                if (filter[key] == null) {\n                    return;\n                }\n                result[key] = this._getBlockTag(filter[key]);\n            });\n            return this.formatter.filter(yield resolveProperties(result));\n        });\n    }\n    _call(transaction, blockTag, attempt) {\n        return __awaiter(this, void 0, void 0, function* () {\n            if (attempt >= MAX_CCIP_REDIRECTS) {\n                logger.throwError(\"CCIP read exceeded maximum redirections\", Logger.errors.SERVER_ERROR, {\n                    redirects: attempt, transaction\n                });\n            }\n            const txSender = transaction.to;\n            const result = yield this.perform(\"call\", { transaction, blockTag });\n            // CCIP Read request via OffchainLookup(address,string[],bytes,bytes4,bytes)\n            if (attempt >= 0 && blockTag === \"latest\" && txSender != null && result.substring(0, 10) === \"0x556f1830\" && (hexDataLength(result) % 32 === 4)) {\n                try {\n                    const data = hexDataSlice(result, 4);\n                    // Check the sender of the OffchainLookup matches the transaction\n                    const sender = hexDataSlice(data, 0, 32);\n                    if (!BigNumber.from(sender).eq(txSender)) {\n                        logger.throwError(\"CCIP Read sender did not match\", Logger.errors.CALL_EXCEPTION, {\n                            name: \"OffchainLookup\",\n                            signature: \"OffchainLookup(address,string[],bytes,bytes4,bytes)\",\n                            transaction, data: result\n                        });\n                    }\n                    // Read the URLs from the response\n                    const urls = [];\n                    const urlsOffset = BigNumber.from(hexDataSlice(data, 32, 64)).toNumber();\n                    const urlsLength = BigNumber.from(hexDataSlice(data, urlsOffset, urlsOffset + 32)).toNumber();\n                    const urlsData = hexDataSlice(data, urlsOffset + 32);\n                    for (let u = 0; u < urlsLength; u++) {\n                        const url = _parseString(urlsData, u * 32);\n                        if (url == null) {\n                            logger.throwError(\"CCIP Read contained corrupt URL string\", Logger.errors.CALL_EXCEPTION, {\n                                name: \"OffchainLookup\",\n                                signature: \"OffchainLookup(address,string[],bytes,bytes4,bytes)\",\n                                transaction, data: result\n                            });\n                        }\n                        urls.push(url);\n                    }\n                    // Get the CCIP calldata to forward\n                    const calldata = _parseBytes(data, 64);\n                    // Get the callbackSelector (bytes4)\n                    if (!BigNumber.from(hexDataSlice(data, 100, 128)).isZero()) {\n                        logger.throwError(\"CCIP Read callback selector included junk\", Logger.errors.CALL_EXCEPTION, {\n                            name: \"OffchainLookup\",\n                            signature: \"OffchainLookup(address,string[],bytes,bytes4,bytes)\",\n                            transaction, data: result\n                        });\n                    }\n                    const callbackSelector = hexDataSlice(data, 96, 100);\n                    // Get the extra data to send back to the contract as context\n                    const extraData = _parseBytes(data, 128);\n                    const ccipResult = yield this.ccipReadFetch(transaction, calldata, urls);\n                    if (ccipResult == null) {\n                        logger.throwError(\"CCIP Read disabled or provided no URLs\", Logger.errors.CALL_EXCEPTION, {\n                            name: \"OffchainLookup\",\n                            signature: \"OffchainLookup(address,string[],bytes,bytes4,bytes)\",\n                            transaction, data: result\n                        });\n                    }\n                    const tx = {\n                        to: txSender,\n                        data: hexConcat([callbackSelector, encodeBytes([ccipResult, extraData])])\n                    };\n                    return this._call(tx, blockTag, attempt + 1);\n                }\n                catch (error) {\n                    if (error.code === Logger.errors.SERVER_ERROR) {\n                        throw error;\n                    }\n                }\n            }\n            try {\n                return hexlify(result);\n            }\n            catch (error) {\n                return logger.throwError(\"bad result from backend\", Logger.errors.SERVER_ERROR, {\n                    method: \"call\",\n                    params: { transaction, blockTag }, result, error\n                });\n            }\n        });\n    }\n    call(transaction, blockTag) {\n        return __awaiter(this, void 0, void 0, function* () {\n            yield this.getNetwork();\n            const resolved = yield resolveProperties({\n                transaction: this._getTransactionRequest(transaction),\n                blockTag: this._getBlockTag(blockTag),\n                ccipReadEnabled: Promise.resolve(transaction.ccipReadEnabled)\n            });\n            return this._call(resolved.transaction, resolved.blockTag, resolved.ccipReadEnabled ? 0 : -1);\n        });\n    }\n    estimateGas(transaction) {\n        return __awaiter(this, void 0, void 0, function* () {\n            yield this.getNetwork();\n            const params = yield resolveProperties({\n                transaction: this._getTransactionRequest(transaction)\n            });\n            const result = yield this.perform(\"estimateGas\", params);\n            try {\n                return BigNumber.from(result);\n            }\n            catch (error) {\n                return logger.throwError(\"bad result from backend\", Logger.errors.SERVER_ERROR, {\n                    method: \"estimateGas\",\n                    params, result, error\n                });\n            }\n        });\n    }\n    _getAddress(addressOrName) {\n        return __awaiter(this, void 0, void 0, function* () {\n            addressOrName = yield addressOrName;\n            if (typeof (addressOrName) !== \"string\") {\n                logger.throwArgumentError(\"invalid address or ENS name\", \"name\", addressOrName);\n            }\n            const address = yield this.resolveName(addressOrName);\n            if (address == null) {\n                logger.throwError(\"ENS name not configured\", Logger.errors.UNSUPPORTED_OPERATION, {\n                    operation: `resolveName(${JSON.stringify(addressOrName)})`\n                });\n            }\n            return address;\n        });\n    }\n    _getBlock(blockHashOrBlockTag, includeTransactions) {\n        return __awaiter(this, void 0, void 0, function* () {\n            yield this.getNetwork();\n            blockHashOrBlockTag = yield blockHashOrBlockTag;\n            // If blockTag is a number (not \"latest\", etc), this is the block number\n            let blockNumber = -128;\n            const params = {\n                includeTransactions: !!includeTransactions\n            };\n            if (isHexString(blockHashOrBlockTag, 32)) {\n                params.blockHash = blockHashOrBlockTag;\n            }\n            else {\n                try {\n                    params.blockTag = yield this._getBlockTag(blockHashOrBlockTag);\n                    if (isHexString(params.blockTag)) {\n                        blockNumber = parseInt(params.blockTag.substring(2), 16);\n                    }\n                }\n                catch (error) {\n                    logger.throwArgumentError(\"invalid block hash or block tag\", \"blockHashOrBlockTag\", blockHashOrBlockTag);\n                }\n            }\n            return poll(() => __awaiter(this, void 0, void 0, function* () {\n                const block = yield this.perform(\"getBlock\", params);\n                // Block was not found\n                if (block == null) {\n                    // For blockhashes, if we didn't say it existed, that blockhash may\n                    // not exist. If we did see it though, perhaps from a log, we know\n                    // it exists, and this node is just not caught up yet.\n                    if (params.blockHash != null) {\n                        if (this._emitted[\"b:\" + params.blockHash] == null) {\n                            return null;\n                        }\n                    }\n                    // For block tags, if we are asking for a future block, we return null\n                    if (params.blockTag != null) {\n                        if (blockNumber > this._emitted.block) {\n                            return null;\n                        }\n                    }\n                    // Retry on the next block\n                    return undefined;\n                }\n                // Add transactions\n                if (includeTransactions) {\n                    let blockNumber = null;\n                    for (let i = 0; i < block.transactions.length; i++) {\n                        const tx = block.transactions[i];\n                        if (tx.blockNumber == null) {\n                            tx.confirmations = 0;\n                        }\n                        else if (tx.confirmations == null) {\n                            if (blockNumber == null) {\n                                blockNumber = yield this._getInternalBlockNumber(100 + 2 * this.pollingInterval);\n                            }\n                            // Add the confirmations using the fast block number (pessimistic)\n                            let confirmations = (blockNumber - tx.blockNumber) + 1;\n                            if (confirmations <= 0) {\n                                confirmations = 1;\n                            }\n                            tx.confirmations = confirmations;\n                        }\n                    }\n                    const blockWithTxs = this.formatter.blockWithTransactions(block);\n                    blockWithTxs.transactions = blockWithTxs.transactions.map((tx) => this._wrapTransaction(tx));\n                    return blockWithTxs;\n                }\n                return this.formatter.block(block);\n            }), { oncePoll: this });\n        });\n    }\n    getBlock(blockHashOrBlockTag) {\n        return (this._getBlock(blockHashOrBlockTag, false));\n    }\n    getBlockWithTransactions(blockHashOrBlockTag) {\n        return (this._getBlock(blockHashOrBlockTag, true));\n    }\n    getTransaction(transactionHash) {\n        return __awaiter(this, void 0, void 0, function* () {\n            yield this.getNetwork();\n            transactionHash = yield transactionHash;\n            const params = { transactionHash: this.formatter.hash(transactionHash, true) };\n            return poll(() => __awaiter(this, void 0, void 0, function* () {\n                const result = yield this.perform(\"getTransaction\", params);\n                if (result == null) {\n                    if (this._emitted[\"t:\" + transactionHash] == null) {\n                        return null;\n                    }\n                    return undefined;\n                }\n                const tx = this.formatter.transactionResponse(result);\n                if (tx.blockNumber == null) {\n                    tx.confirmations = 0;\n                }\n                else if (tx.confirmations == null) {\n                    const blockNumber = yield this._getInternalBlockNumber(100 + 2 * this.pollingInterval);\n                    // Add the confirmations using the fast block number (pessimistic)\n                    let confirmations = (blockNumber - tx.blockNumber) + 1;\n                    if (confirmations <= 0) {\n                        confirmations = 1;\n                    }\n                    tx.confirmations = confirmations;\n                }\n                return this._wrapTransaction(tx);\n            }), { oncePoll: this });\n        });\n    }\n    getTransactionReceipt(transactionHash) {\n        return __awaiter(this, void 0, void 0, function* () {\n            yield this.getNetwork();\n            transactionHash = yield transactionHash;\n            const params = { transactionHash: this.formatter.hash(transactionHash, true) };\n            return poll(() => __awaiter(this, void 0, void 0, function* () {\n                const result = yield this.perform(\"getTransactionReceipt\", params);\n                if (result == null) {\n                    if (this._emitted[\"t:\" + transactionHash] == null) {\n                        return null;\n                    }\n                    return undefined;\n                }\n                // \"geth-etc\" returns receipts before they are ready\n                if (result.blockHash == null) {\n                    return undefined;\n                }\n                const receipt = this.formatter.receipt(result);\n                if (receipt.blockNumber == null) {\n                    receipt.confirmations = 0;\n                }\n                else if (receipt.confirmations == null) {\n                    const blockNumber = yield this._getInternalBlockNumber(100 + 2 * this.pollingInterval);\n                    // Add the confirmations using the fast block number (pessimistic)\n                    let confirmations = (blockNumber - receipt.blockNumber) + 1;\n                    if (confirmations <= 0) {\n                        confirmations = 1;\n                    }\n                    receipt.confirmations = confirmations;\n                }\n                return receipt;\n            }), { oncePoll: this });\n        });\n    }\n    getLogs(filter) {\n        return __awaiter(this, void 0, void 0, function* () {\n            yield this.getNetwork();\n            const params = yield resolveProperties({ filter: this._getFilter(filter) });\n            const logs = yield this.perform(\"getLogs\", params);\n            logs.forEach((log) => {\n                if (log.removed == null) {\n                    log.removed = false;\n                }\n            });\n            return Formatter.arrayOf(this.formatter.filterLog.bind(this.formatter))(logs);\n        });\n    }\n    getEtherPrice() {\n        return __awaiter(this, void 0, void 0, function* () {\n            yield this.getNetwork();\n            return this.perform(\"getEtherPrice\", {});\n        });\n    }\n    _getBlockTag(blockTag) {\n        return __awaiter(this, void 0, void 0, function* () {\n            blockTag = yield blockTag;\n            if (typeof (blockTag) === \"number\" && blockTag < 0) {\n                if (blockTag % 1) {\n                    logger.throwArgumentError(\"invalid BlockTag\", \"blockTag\", blockTag);\n                }\n                let blockNumber = yield this._getInternalBlockNumber(100 + 2 * this.pollingInterval);\n                blockNumber += blockTag;\n                if (blockNumber < 0) {\n                    blockNumber = 0;\n                }\n                return this.formatter.blockTag(blockNumber);\n            }\n            return this.formatter.blockTag(blockTag);\n        });\n    }\n    getResolver(name) {\n        return __awaiter(this, void 0, void 0, function* () {\n            let currentName = name;\n            while (true) {\n                if (currentName === \"\" || currentName === \".\") {\n                    return null;\n                }\n                // Optimization since the eth node cannot change and does\n                // not have a wildcard resolver\n                if (name !== \"eth\" && currentName === \"eth\") {\n                    return null;\n                }\n                // Check the current node for a resolver\n                const addr = yield this._getResolver(currentName, \"getResolver\");\n                // Found a resolver!\n                if (addr != null) {\n                    const resolver = new Resolver(this, addr, name);\n                    // Legacy resolver found, using EIP-2544 so it isn't safe to use\n                    if (currentName !== name && !(yield resolver.supportsWildcard())) {\n                        return null;\n                    }\n                    return resolver;\n                }\n                // Get the parent node\n                currentName = currentName.split(\".\").slice(1).join(\".\");\n            }\n        });\n    }\n    _getResolver(name, operation) {\n        return __awaiter(this, void 0, void 0, function* () {\n            if (operation == null) {\n                operation = \"ENS\";\n            }\n            const network = yield this.getNetwork();\n            // No ENS...\n            if (!network.ensAddress) {\n                logger.throwError(\"network does not support ENS\", Logger.errors.UNSUPPORTED_OPERATION, { operation, network: network.name });\n            }\n            try {\n                // keccak256(\"resolver(bytes32)\")\n                const addrData = yield this.call({\n                    to: network.ensAddress,\n                    data: (\"0x0178b8bf\" + namehash(name).substring(2))\n                });\n                return this.formatter.callAddress(addrData);\n            }\n            catch (error) {\n                // ENS registry cannot throw errors on resolver(bytes32)\n            }\n            return null;\n        });\n    }\n    resolveName(name) {\n        return __awaiter(this, void 0, void 0, function* () {\n            name = yield name;\n            // If it is already an address, nothing to resolve\n            try {\n                return Promise.resolve(this.formatter.address(name));\n            }\n            catch (error) {\n                // If is is a hexstring, the address is bad (See #694)\n                if (isHexString(name)) {\n                    throw error;\n                }\n            }\n            if (typeof (name) !== \"string\") {\n                logger.throwArgumentError(\"invalid ENS name\", \"name\", name);\n            }\n            // Get the addr from the resolver\n            const resolver = yield this.getResolver(name);\n            if (!resolver) {\n                return null;\n            }\n            return yield resolver.getAddress();\n        });\n    }\n    lookupAddress(address) {\n        return __awaiter(this, void 0, void 0, function* () {\n            address = yield address;\n            address = this.formatter.address(address);\n            const node = address.substring(2).toLowerCase() + \".addr.reverse\";\n            const resolverAddr = yield this._getResolver(node, \"lookupAddress\");\n            if (resolverAddr == null) {\n                return null;\n            }\n            // keccak(\"name(bytes32)\")\n            const name = _parseString(yield this.call({\n                to: resolverAddr,\n                data: (\"0x691f3431\" + namehash(node).substring(2))\n            }), 0);\n            const addr = yield this.resolveName(name);\n            if (addr != address) {\n                return null;\n            }\n            return name;\n        });\n    }\n    getAvatar(nameOrAddress) {\n        return __awaiter(this, void 0, void 0, function* () {\n            let resolver = null;\n            if (isHexString(nameOrAddress)) {\n                // Address; reverse lookup\n                const address = this.formatter.address(nameOrAddress);\n                const node = address.substring(2).toLowerCase() + \".addr.reverse\";\n                const resolverAddress = yield this._getResolver(node, \"getAvatar\");\n                if (!resolverAddress) {\n                    return null;\n                }\n                // Try resolving the avatar against the addr.reverse resolver\n                resolver = new Resolver(this, resolverAddress, node);\n                try {\n                    const avatar = yield resolver.getAvatar();\n                    if (avatar) {\n                        return avatar.url;\n                    }\n                }\n                catch (error) {\n                    if (error.code !== Logger.errors.CALL_EXCEPTION) {\n                        throw error;\n                    }\n                }\n                // Try getting the name and performing forward lookup; allowing wildcards\n                try {\n                    // keccak(\"name(bytes32)\")\n                    const name = _parseString(yield this.call({\n                        to: resolverAddress,\n                        data: (\"0x691f3431\" + namehash(node).substring(2))\n                    }), 0);\n                    resolver = yield this.getResolver(name);\n                }\n                catch (error) {\n                    if (error.code !== Logger.errors.CALL_EXCEPTION) {\n                        throw error;\n                    }\n                    return null;\n                }\n            }\n            else {\n                // ENS name; forward lookup with wildcard\n                resolver = yield this.getResolver(nameOrAddress);\n                if (!resolver) {\n                    return null;\n                }\n            }\n            const avatar = yield resolver.getAvatar();\n            if (avatar == null) {\n                return null;\n            }\n            return avatar.url;\n        });\n    }\n    perform(method, params) {\n        return logger.throwError(method + \" not implemented\", Logger.errors.NOT_IMPLEMENTED, { operation: method });\n    }\n    _startEvent(event) {\n        this.polling = (this._events.filter((e) => e.pollable()).length > 0);\n    }\n    _stopEvent(event) {\n        this.polling = (this._events.filter((e) => e.pollable()).length > 0);\n    }\n    _addEventListener(eventName, listener, once) {\n        const event = new Event(getEventTag(eventName), listener, once);\n        this._events.push(event);\n        this._startEvent(event);\n        return this;\n    }\n    on(eventName, listener) {\n        return this._addEventListener(eventName, listener, false);\n    }\n    once(eventName, listener) {\n        return this._addEventListener(eventName, listener, true);\n    }\n    emit(eventName, ...args) {\n        let result = false;\n        let stopped = [];\n        let eventTag = getEventTag(eventName);\n        this._events = this._events.filter((event) => {\n            if (event.tag !== eventTag) {\n                return true;\n            }\n            setTimeout(() => {\n                event.listener.apply(this, args);\n            }, 0);\n            result = true;\n            if (event.once) {\n                stopped.push(event);\n                return false;\n            }\n            return true;\n        });\n        stopped.forEach((event) => { this._stopEvent(event); });\n        return result;\n    }\n    listenerCount(eventName) {\n        if (!eventName) {\n            return this._events.length;\n        }\n        let eventTag = getEventTag(eventName);\n        return this._events.filter((event) => {\n            return (event.tag === eventTag);\n        }).length;\n    }\n    listeners(eventName) {\n        if (eventName == null) {\n            return this._events.map((event) => event.listener);\n        }\n        let eventTag = getEventTag(eventName);\n        return this._events\n            .filter((event) => (event.tag === eventTag))\n            .map((event) => event.listener);\n    }\n    off(eventName, listener) {\n        if (listener == null) {\n            return this.removeAllListeners(eventName);\n        }\n        const stopped = [];\n        let found = false;\n        let eventTag = getEventTag(eventName);\n        this._events = this._events.filter((event) => {\n            if (event.tag !== eventTag || event.listener != listener) {\n                return true;\n            }\n            if (found) {\n                return true;\n            }\n            found = true;\n            stopped.push(event);\n            return false;\n        });\n        stopped.forEach((event) => { this._stopEvent(event); });\n        return this;\n    }\n    removeAllListeners(eventName) {\n        let stopped = [];\n        if (eventName == null) {\n            stopped = this._events;\n            this._events = [];\n        }\n        else {\n            const eventTag = getEventTag(eventName);\n            this._events = this._events.filter((event) => {\n                if (event.tag !== eventTag) {\n                    return true;\n                }\n                stopped.push(event);\n                return false;\n            });\n        }\n        stopped.forEach((event) => { this._stopEvent(event); });\n        return this;\n    }\n}\n"]},"metadata":{},"sourceType":"module"}